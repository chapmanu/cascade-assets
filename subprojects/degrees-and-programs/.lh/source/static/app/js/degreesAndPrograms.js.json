{
    "sourceFile": "source/static/app/js/degreesAndPrograms.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1628806850435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1628807225568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \tchapman.degreesAndPrograms = {\n \n \t\tinit: function () {\n \n-\t\t\t// $('.degrees-and-programs').addClass('ready');\n+\t\t\t$('.degrees-and-programs').addClass('ready');\n \n \t\t\tthis.bindUIEvents();\n \n \t\t},\n"
                },
                {
                    "date": 1628812542363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,68 +1,1306 @@\n /*global window:false */\n /*global $:false */\n+/*global location:false */\n /*jslint plusplus: true */\n \n var chapman = chapman || {};\n \n (function ($, Modernizr, window, document) {\n+  \"use strict\";\n+  var activeSection = \"\", // Active section (discover, undergraduate, or graduate)\n+    activeFilters = [],\n+    allResults = [],\n+    undergraduateResults = [],\n+    graduateResults = [],\n+    undergraduateProgramNames = [],\n+    graduateProgramNames = [],\n+    resultsSetItems = [],\n+    resultsSetItemsLoaded = 0,\n+    lazyLoadingPaused = true,\n+    lazyLoadingIntervalTime = 200,\n+    resultsSetCount = 0,\n+    isTransitioning = false, // Flag for transitioning between sections\n+    isUserScroll = true, // Flag for scrolling caused by user vs. animation\n+    transitioningClass = \"is-transitioning\",\n+    urlTypeQuery = \"\",\n+    $dapFeature = $(\"#js-dap-feature\"),\n+    $resultsCount = $(\".results-count\"),\n+    activeClass = \"active\",\n+    standardTransitionTime = 0,\n+    isFormChangeEvent = false,\n+    hashChangesActive = false,\n+    isMobile = Modernizr.mq(\"(max-width: 1023px)\"),\n+    scrollPosition = $(window).scrollTop(),\n+    headerOffset = parseInt($(\"html\").css(\"padding-top\").replace(\"px\", \"\")),\n+    dap = {\n+      //----- Discover Section -----//\n+      discover: {\n+        fieldNamePrefix: \"dap-discover-\",\n+        activeMotivation: \"\",\n+        $motivationsItems: $(\"#js-dap-discover-motivations .motivation\"),\n+        activeInterest: \"\",\n+        $interests: $(\"#js-dap-discover-interests\"),\n+        $interestsItems: $(\"#js-dap-discover-interests .interest\"),\n+        $keywordForm: $(\"#js-dap-discover-keyword-form\"),\n+        $results: $(\"#js-dap-results-discover\"),\n+      },\n \n-\t'use strict';\n+      //----- Undergraduate Section -----//\n+      undergraduate: {\n+        fieldNamePrefix: \"dap-undergraduate-\",\n+        $programTypes: $(\"#js-dap-undergraduate-program-types\"),\n+        $interests: $(\"#js-dap-undergraduate-interests\"),\n+        $interestsItems: $(\"#js-dap-undergraduate-interests input\"),\n+        $resetInterests: $(\"#js-reset-undergraduate-interests\"),\n+        $filterTypes: $(\"#js-dap-undergraduate-filter-types\"),\n+        $results: $(\"#js-dap-results-undergraduate\"),\n+      },\n \n-\tchapman.degreesAndPrograms = {\n+      //----- Graduate Section -----//\n+      graduate: {\n+        fieldNamePrefix: \"dap-graduate-\",\n+        $programTypes: $(\"#js-dap-graduate-program-types\"),\n+        $filterTypes: $(\"#js-dap-graduate-filter-types\"),\n+        $results: $(\"#js-dap-results-graduate\"),\n+      },\n+    };\n \n-\t\tinit: function () {\n+  chapman.degreesAndProgramsApp = {\n+    init: function () {\n+      this.getProgramsData();\n+      this.bindUIEvents();\n+      this.getUrlTypeQuery();\n+      this.initLazyLoadingInterval();\n+    },\n \n-\t\t\t$('.degrees-and-programs').addClass('ready');\n+    bindUIEvents: function () {\n+      var _this = this;\n \n-\t\t\tthis.bindUIEvents();\n+      //-------- Global Events --------//\n \n-\t\t},\n+      $(window).on(\"scroll resize\", function () {\n+        if (isUserScroll) {\n+          lazyLoadingPaused = false;\n+        }\n \n-\t\tbindUIEvents: function () {\n+        isMobile = Modernizr.mq(\"(max-width: 1023px)\"); // Reset this if screen size changes\n+        scrollPosition = $(window).scrollTop();\n+      });\n \n-\t\t\t$('.results-views li').on('click', function () {\n-\t\t\t\tchapman.degreesAndPrograms.switchResultsView($(this));\n-\t\t\t});\n+      // Click on any section's accordion trigger\n+      $(\".dap-section-accordion-trigger\").on(\"click\", function () {\n+        if (!isTransitioning) {\n+          _this.toggleSection($(this));\n+        }\n+      });\n \n-\t\t\t$('.dap-results').on('click', '.active-content-toggle', function (event) {\n-\t\t\t\tevent.preventDefault();\n-\t\t\t\t$(this).closest('.result').toggleClass('active');\n-\t\t\t});\n+      // Form change in any section\n+      $(\"#js-dap-feature form\")\n+        .on(\"change\", function (event) {\n+          isFormChangeEvent = true;\n \n-\t\t\t$('#js-dap-undergraduate-interests .show-more a').on('click', function () {\n-\t\t\t\t$('#js-dap-undergraduate-interests-list').addClass('show-all');\n-\t\t\t});\n+          if (!hashChangesActive) {\n+            var form = $(this),\n+              target = $(event.target),\n+              hash = form.serialize();\n \n-\t\t},\n+            if (target.attr(\"id\").indexOf(\"keyword\") !== -1) {\n+              var keywordVal = target.val();\n \n-\t\tswitchResultsView: function (el) {\n-\t\t\tvar viewButton = el,\n-\t\t\t\tnewView = viewButton.data('view'),\n-\t\t\t\tresults = viewButton.closest('.dap-results');\n+              // If using the keyword search in the Discover section...\n+              if (activeSection === \"discover\") {\n+                var trigger = $(\"#js-dap-section-undergraduate .dap-body\");\n \n-\t\t\tif (!(viewButton.hasClass('active'))) {\n+                // Jump to Undergraduate section to search by keyword\n+                $(\"#dap-undergraduate-keyword\").val(keywordVal);\n+                _this.toggleSection(\n+                  $(\"#js-dap-section-undergraduate\"),\n+                  trigger\n+                );\n+                _this.applyHashFilters(); // This is a special case where the hash filters must be applied even though there was a form event\n+              } else {\n+                // Otherwise reset the rest of the form\n+                _this.resetForm(form);\n+                target.val(keywordVal);\n \n-\t\t\t\tviewButton.closest('.results-views').find('li').removeClass('active');\n-\t\t\t\tviewButton.addClass('active');\n+                window.location.hash = hash; // Update the hash so history is enabled\n+                _this.resetFiltering(form);\n+              }\n+            } else {\n+              form.find('input[id*=\"keyword\"]').val(\"\");\n+              window.location.hash = hash; // Update the hash so history is enabled\n+              _this.resetFiltering(form);\n+            }\n \n-\t\t\t\tif (newView === 'grid-view') {\n-\t\t\t\t\tresults.removeClass('list-view').addClass('grid-view');\n-\t\t\t\t} else if (newView === 'list-view') {\n-\t\t\t\t\tresults.removeClass('grid-view').addClass('list-view');\n-\t\t\t\t}\n+            setTimeout(function () {\n+              _this.scrollToResults();\n+            }, 100);\n+          }\n+        })\n+        .on(\"submit\", function (event) {\n+          event.preventDefault();\n+        });\n \n-\t\t\t}\n+      // On forward/back\n+      $(window).on(\"hashchange\", function (event) {\n+        // Only do hash filtering if the event wasn't from the DOM\n+        if (!isFormChangeEvent && !hashChangesActive) {\n+          _this.applyHashFilters();\n+        }\n \n-\t\t}\n+        isFormChangeEvent = false; // Reset flag\n+      });\n \n-\t};\n+      //-------- Discover Events --------//\n \n+      // Click on Motivations in Discover section\n+      dap.discover.$motivationsItems.on(\"click\", function (event) {\n+        if ($(event.target).is(\"input\")) {\n+          _this.switchDiscoverMotivation($(this));\n+        }\n+      });\n+\n+      // Click on Interests in Discover section\n+      dap.discover.$interestsItems.on(\"click\", function (event) {\n+        if ($(event.target).is(\"input\")) {\n+          _this.switchDiscoverInterest($(this));\n+        }\n+      });\n+\n+      //-------- Undergraduate Events --------//\n+\n+      // Click on Reset button in Undergraduate section\n+      dap.undergraduate.$resetInterests.on(\"click\", function () {\n+        dap.undergraduate.$interestsItems.prop(\"checked\", false);\n+        _this.resetFiltering($(this).closest(\"form\"));\n+      });\n+\n+      // Click on Program Types buttons in Undergraduate section\n+      dap.undergraduate.$programTypes.on(\n+        \"change\",\n+        \".program-type input\",\n+        function () {\n+          _this.syncUndergraduateProgramTypes($(this));\n+        }\n+      );\n+\n+      $(\"form\").on(\"change\", function (event) {\n+        var form = $(this),\n+          target = $(event.target);\n+\n+        if (target.attr(\"id\").indexOf(\"keyword\") !== -1) {\n+          var keywordVal = target.val();\n+\n+          // If using the keyword search in the Discover section...\n+          if (activeSection === \"discover\") {\n+            var trigger = $(\n+              \"#js-dap-section-undergraduate .dap-section-accordion-trigger\"\n+            );\n+\n+            // Jump to Undergraduate section to search by keyword\n+            _this.toggleSection($(\"#js-dap-section-undergraduate\"), trigger);\n+            $(\"#dap-undergraduate-keyword\").val(keywordVal);\n+          } else {\n+            // Otherwise reset the rest of the form\n+            _this.resetForm(form);\n+            target.val(keywordVal);\n+          }\n+        }\n+      });\n+\n+      //-------- Graduate Events --------//\n+\n+      // Click on Program Types buttons in Graduate section\n+      dap.graduate.$programTypes.on(\n+        \"change\",\n+        \".program-type input\",\n+        function () {\n+          _this.syncGraduateProgramTypes($(this));\n+        }\n+      );\n+    },\n+\n+    resetFiltering: function (form) {\n+      if (form !== undefined && form.length > 0) {\n+        var _this = this;\n+\n+        activeFilters = []; // Clear filters\n+        _this.clearResultsHTML(); // Clear results markup\n+        dap.discover.$keywordForm.hide();\n+        resultsSetItems = [];\n+        resultsSetItemsLoaded = 0;\n+        resultsSetCount = 0; // Reset result counter\n+        _this.getActiveFilters(form);\n+        _this.getResultsSet();\n+      }\n+    },\n+\n+    resetForm: function (form) {\n+      if (form !== undefined && form.length > 0) {\n+        var formSelects = form.find(\"select\");\n+\n+        form[0].reset();\n+\n+        // Reset custom selects\n+        if (formSelects && formSelects.length) {\n+          for (var i = 0; i < formSelects.length; i++) {\n+            var select = $(formSelects[i]);\n+            chapman.customSelect.resetSelect(select);\n+          }\n+        }\n+      }\n+    },\n+\n+    resetAllForms: function () {\n+      var _this = this;\n+\n+      for (var type in dap) {\n+        // Get all dap objects\n+        if (dap.hasOwnProperty(type)) {\n+          _this.resetForm($(\"#js-\" + dap[type].fieldNamePrefix + \"form\"));\n+        }\n+      }\n+    },\n+\n+    getProgramsData: function () {\n+      var _this = this,\n+        jsonUrl = $dapFeature.data(\"json-url\");\n+      console.log(\"json url: \" + jsonUrl);\n+      $.ajax({\n+        type: \"GET\",\n+        url: jsonUrl,\n+        dataType: \"text\",\n+        success: function (json) {\n+          console.log(JSON.stringify(json));\n+          var data = $.parseJSON(json);\n+\n+          // console.log(\"data \" + JSON.stringify(data));\n+\n+          allResults = data.results;\n+\n+          for (var i = 0; i < allResults.length; i++) {\n+            var result = allResults[i],\n+              type = result.type || \"\",\n+              isUndergradAndGrad = false;\n+\n+            // Fallback in case no degree type is specified\n+            if (result.degreeTypes !== undefined) {\n+              // Check if this result is an accelerated or bridge program\n+              for (var j = 0; j < result.degreeTypes.type.length; j++) {\n+                var degreeType = result.degreeTypes.type[j];\n+\n+                if (degreeType) {\n+                  var degreeTypeFormatted = degreeType.toLowerCase();\n+\n+                  // Any of the following count as bridge/accelerated\n+                  if (\n+                    degreeTypeFormatted === \"bridge\" ||\n+                    degreeTypeFormatted === \"integrated/4+1\" ||\n+                    degreeTypeFormatted === \"accelerated 3+2\"\n+                  ) {\n+                    isUndergradAndGrad = true;\n+                    break;\n+                  }\n+                }\n+              }\n+            }\n+\n+            // If it's a bridge or accelerated program, it's both undergraduate and graduate\n+            if (isUndergradAndGrad) {\n+              undergraduateResults.push(result);\n+              graduateResults.push(result);\n+              undergraduateProgramNames.push(result.title);\n+              graduateProgramNames.push(result.title);\n+            } else {\n+              if (/^undergraduate/.test(type)) {\n+                undergraduateResults.push(result);\n+                undergraduateProgramNames.push(result.title);\n+              }\n+\n+              if (/^graduate/.test(type)) {\n+                graduateResults.push(result);\n+                graduateProgramNames.push(result.title);\n+              }\n+            }\n+          }\n+\n+          // Alphabetically sort everything\n+          undergraduateProgramNames.sort();\n+          graduateProgramNames.sort();\n+          undergraduateResults.sort(_this.titleAlphaSort);\n+          graduateResults.sort(_this.titleAlphaSort);\n+\n+          _this.initAutocompletes();\n+          _this.applyHashFilters();\n+        },\n+        error: function (e) {\n+          console.error(\"Error loading programs feed.\");\n+        },\n+      });\n+    },\n+\n+    initLazyLoadingInterval: function () {\n+      var _this = this;\n+\n+      setInterval(function () {\n+        if (\n+          !lazyLoadingPaused &&\n+          activeSection !== undefined &&\n+          activeSection !== \"\"\n+        ) {\n+          _this.lazyLoadResults();\n+        }\n+      }, lazyLoadingIntervalTime);\n+    },\n+\n+    lazyLoadResults: function () {\n+      var _this = this;\n+      var $resultsContainer = $(\"#js-dap-results-\" + activeSection);\n+      var bottomOfResultsContainer;\n+      var windowHeight = $(window).height();\n+      var bottomOfWindow = scrollPosition + windowHeight;\n+      var scrollThreshold = bottomOfWindow + windowHeight * 0.33;\n+      var result = $(resultsSetItems[resultsSetItemsLoaded]);\n+\n+      if (resultsSetItemsLoaded < resultsSetItems.length && result.length) {\n+        // If there are results left to load\n+\n+        $(\"#js-dap-results-\" + activeSection + \" .results-row\").append(result); // Append the result\n+        var $result = $(result); // Store previously appended result as variable\n+        bottomOfResultsContainer =\n+          $resultsContainer.offset().top + $resultsContainer.outerHeight(true); // Recalculate container's height with new result\n+\n+        if (\n+          scrollThreshold >= bottomOfResultsContainer &&\n+          $resultsContainer.is(\":visible\")\n+        ) {\n+          // If the user is past the scroll threshold\n+          _this.fadeInResult($result); // Fade the result in\n+          resultsSetItemsLoaded++; // Move to the next result\n+        } else {\n+          $result.remove(); // Otherwise remove it and wait until there's more room\n+          lazyLoadingPaused = true;\n+        }\n+      } else {\n+        lazyLoadingPaused = true;\n+\n+        if (activeSection === \"discover\") {\n+          // Open the keyword form\n+          dap.discover.$keywordForm.slideDown(\n+            standardTransitionTime,\n+            function () {\n+              $(this).css(\"overflow\", \"visible\");\n+            }\n+          );\n+        }\n+      }\n+    },\n+\n+    fadeInResult: function (result) {\n+      var image = result.find(\".image\"),\n+        imageSrc = image.data(\"src\") || \"\",\n+        desc = result.find(\".result-content .desc\"),\n+        activeContentInner = result.find(\".active-content-inner\");\n+\n+      // Truncate description\n+      if (desc.length) {\n+        desc.dotdotdot({\n+          watch: true,\n+        });\n+      }\n+\n+      // Truncate content container\n+      if (activeContentInner.length) {\n+        activeContentInner.dotdotdot({\n+          watch: true,\n+          after: \"a\",\n+        });\n+      }\n+\n+      // Load the images dynamically\n+      if (image.length) {\n+        image.css(\"background-image\", \"url(\" + imageSrc + \")\");\n+      }\n+\n+      setTimeout(function () {\n+        result.addClass(\"faded-in\");\n+      }, 100);\n+    },\n+\n+    toggleSection: function (el, scrollEl) {\n+      var _this = this,\n+        section = el.closest(\".dap-section\"),\n+        sectionBody = section.find(\".dap-body\"),\n+        sectionID = section.data(\"id\"),\n+        form;\n+\n+      isTransitioning = true;\n+      $dapFeature.addClass(transitioningClass);\n+\n+      // Reset the previously opened section\n+      if (\n+        activeSection !== undefined &&\n+        activeSection !== \"\" &&\n+        $(\"#js-dap-\" + activeSection + \"-form\").length > 0\n+      ) {\n+        form = $(\"#js-dap-\" + activeSection + \"-form\");\n+        // _this.resetFiltering(form);\n+        _this.resetForm(form);\n+      }\n+\n+      _this.resetDiscoverMotivation();\n+      _this.resetDiscoverInterest();\n+\n+      if (sectionID !== \"discover\") {\n+        _this.closeDiscoverMotivationPanel();\n+        _this.closeDiscoverInterestPanel();\n+      }\n+\n+      if (section.hasClass(\"active\")) {\n+        // If the section is open, close it\n+        var activeResults = $(\n+          \"#js-dap-results-\" + activeSection + \" .results-row .result\"\n+        );\n+\n+        section.removeClass(\"active\");\n+        activeResults.removeClass(\"faded-in\");\n+        setTimeout(function () {\n+          activeResults.removeClass(\"visible\");\n+\n+          // Close the section\n+          sectionBody.slideUp(standardTransitionTime, function () {\n+            isTransitioning = false;\n+            $dapFeature.removeClass(transitioningClass);\n+          });\n+\n+          activeSection = \"\"; // Clear the active section\n+        }, 500);\n+      } else {\n+        // Otherwise close the old section and open the new one\n+\n+        activeSection = sectionID; // Change the active section\n+        form = $(\"#js-dap-\" + activeSection + \"-form\");\n+\n+        if (!hashChangesActive) {\n+          // _this.resetFiltering(form); // Check for filters preset (potentially from query string)\n+\n+          // Update the hash so history is enabled\n+          var oldHash = window.location.hash.replace(\"#\", \"\");\n+          var newHash = form.serialize();\n+          window.location.hash = newHash; // Triggers hash change most of the time\n+\n+          if (oldHash === newHash) {\n+            _this.applyHashFilters(); // Applies filters if the page is reloaded with the same hash\n+          }\n+        }\n+\n+        var newSectionTransitionDelay = standardTransitionTime;\n+\n+        if ($(\".dap-section.active\").length) {\n+          // Close old section\n+          $(\".dap-section.active .dap-body\").slideUp(standardTransitionTime);\n+          $(\".dap-section.active\").removeClass(\"active\");\n+          $resultsCount.removeClass(\"faded-in\");\n+        } else {\n+          newSectionTransitionDelay = 0; // No delay required if there's no old section to close\n+        }\n+\n+        setTimeout(function () {\n+          // Wait until old section is closed (if there is one)\n+\n+          // Open new section\n+          section.addClass(\"active\");\n+          sectionBody.slideDown(standardTransitionTime, function () {\n+            $(this).css(\"overflow\", \"visible\");\n+\n+            // Wait to do the following until new section is opened\n+            var scrollToSectionTime = 1000,\n+              scrollPoint;\n+\n+            headerOffset = parseInt();\n+            // $(\"html\").css(\"padding-top\").replace(\"px\", \"\")\n+\n+            // Scroll to new section\n+            if (scrollEl) {\n+              scrollPoint = scrollEl.offset().top - headerOffset;\n+            } else if (scrollEl === undefined) {\n+              scrollPoint = section.offset().top - headerOffset;\n+            }\n+\n+            if (scrollPoint) {\n+              isUserScroll = false;\n+\n+              $(\"html, body\").animate(\n+                {\n+                  scrollTop: scrollPoint,\n+                },\n+                scrollToSectionTime,\n+                \"swing\",\n+                function () {\n+                  isTransitioning = false;\n+\n+                  setTimeout(function () {\n+                    isUserScroll = true;\n+                  }, 100);\n+\n+                  $dapFeature.removeClass(transitioningClass);\n+                }\n+              );\n+            } else {\n+              isTransitioning = false;\n+              $dapFeature.removeClass(transitioningClass);\n+            }\n+          });\n+        }, newSectionTransitionDelay);\n+      }\n+    },\n+\n+    switchDiscoverMotivation: function (el) {\n+      if (!el.hasClass(activeClass)) {\n+        var motivation = el.data(\"motivation\"),\n+          $motivationInterests = $(\n+            '#js-dap-discover-interests .interest[data-category=\"' +\n+              motivation +\n+              '\"]'\n+          );\n+\n+        dap.discover.$interests.find(\"input\").prop(\"checked\", false); // Reset interests\n+        dap.discover.activeMotivation = motivation; // Change the active motivation\n+        el.find(\"input\").prop(\"checked\", true); // Make sure the motivation's input is checked if it's not already\n+\n+        // Reset motivations, then activate the current one\n+        dap.discover.$motivationsItems.removeClass(activeClass);\n+        el.addClass(activeClass);\n+\n+        // Reset interests, then show/fade in interests of the chosen motivation\n+        dap.discover.$interestsItems.removeClass(\"faded-in\");\n+        dap.discover.$interests.removeClass(\"interest-active\");\n+\n+        dap.discover.$interestsItems.removeClass(\"visible\"); // Hide all interests by default\n+        $motivationInterests.addClass(\"visible\"); // Only show interests of this motivation\n+\n+        dap.discover.$interests.slideDown(standardTransitionTime, function () {\n+          // Then slide down the interests section\n+          $(this).css(\"overflow\", \"visible\");\n+\n+          $motivationInterests.addClass(\"faded-in\");\n+\n+          // Open the results section\n+          dap.discover.$results.slideDown(standardTransitionTime, function () {\n+            $(this).css(\"overflow\", \"visible\");\n+\n+            setTimeout(function () {\n+              lazyLoadingPaused = false;\n+            }, standardTransitionTime / 2);\n+          });\n+        });\n+      }\n+    },\n+\n+    resetDiscoverMotivation: function () {\n+      dap.discover.activeMotivation = \"\";\n+      dap.discover.$motivationsItems.removeClass(activeClass);\n+    },\n+\n+    closeDiscoverMotivationPanel: function () {\n+      dap.discover.$interests.slideUp(standardTransitionTime);\n+      dap.discover.$keywordForm.hide();\n+\n+      setTimeout(function () {\n+        dap.discover.$interestsItems.removeClass(\"faded-in visible\");\n+      }, standardTransitionTime);\n+    },\n+\n+    switchDiscoverInterest: function (el) {\n+      if (!el.hasClass(activeClass)) {\n+        var interest = el.data(\"interest\");\n+\n+        // Change the active interest\n+        dap.discover.activeInterest = interest;\n+        dap.discover.$interests.addClass(\"interest-active\");\n+\n+        // Remove active state from any other interests, then make the new one active\n+        dap.discover.$interestsItems.removeClass(activeClass);\n+        el.addClass(activeClass);\n+        el.find(\"input\").prop(\"checked\", true); // Make sure the interest's input is checked if it's not already\n+\n+        lazyLoadingPaused = false;\n+      }\n+    },\n+\n+    resetDiscoverInterest: function () {\n+      dap.discover.activeInterest = \"\";\n+      dap.discover.$interestsItems.removeClass(activeClass);\n+    },\n+\n+    closeDiscoverInterestPanel: function () {\n+      dap.discover.$interests.removeClass(\"interest-active\");\n+      dap.discover.$results.slideUp(standardTransitionTime);\n+    },\n+\n+    /*\n+\t\t\tIn the Undergraduate section, All Programs cannot be selected when other program types are selected.\n+\t\t\tInversely, when other program types are selected, All Programs cannot be selected.\n+\t\t\tThis function selects/deselects inputs accordingly.\n+\t\t*/\n+    syncUndergraduateProgramTypes: function (el) {\n+      var allProgramsID = \"dap-undergraduate-program-all\",\n+        inputID = el.attr(\"id\");\n+\n+      if (inputID === allProgramsID) {\n+        dap.undergraduate.$programTypes\n+          .find(\"input\")\n+          .not(el)\n+          .prop(\"checked\", false);\n+      } else {\n+        $(\"#\" + allProgramsID).prop(\"checked\", false);\n+      }\n+    },\n+\n+    /*\n+\t\t\tIn the Graduate section, All Programs cannot be selected when other program types are selected.\n+\t\t\tInversely, when other program types are selected, All Programs cannot be selected.\n+\t\t\tThis function selects/deselects inputs accordingly.\n+\t\t*/\n+    syncGraduateProgramTypes: function (el) {\n+      var allProgramsID = \"dap-graduate-program-all\",\n+        inputID = el.attr(\"id\");\n+\n+      if (inputID === allProgramsID) {\n+        dap.graduate.$programTypes.find(\"input\").not(el).prop(\"checked\", false);\n+      } else {\n+        $(\"#\" + allProgramsID).prop(\"checked\", false);\n+      }\n+    },\n+\n+    getActiveFilters: function (form) {\n+      var formData = form.serializeArray(),\n+        degreeTypesArray = [], // Used for storing degree types\n+        interestsArray = [];\n+\n+      for (var i = 0; i < formData.length; i++) {\n+        var filter = formData[i],\n+          name = filter.name,\n+          formattedName,\n+          value = filter.value;\n+\n+        formattedName = name.replace(dap[activeSection].fieldNamePrefix, \"\"); // Remove form name prefixes\n+\n+        // If there is a value\n+        if (value.length > 0) {\n+          if (formattedName.indexOf(\"program\") !== -1) {\n+            // Push to array if a program\n+            var valuesArray = value.split(\",\");\n+\n+            // Loop through all values associated with the filter\n+            for (var j = 0; j < valuesArray.length; j++) {\n+              var programType = valuesArray[j];\n+\n+              // Add each to the degree types array\n+              if (degreeTypesArray.indexOf(programType) === -1) {\n+                degreeTypesArray.push(programType);\n+              }\n+            }\n+          } else if (formattedName.indexOf(\"interest\") !== -1) {\n+            // Push to array if an interest\n+            interestsArray.push(value);\n+          } else if (formattedName.indexOf(\"school\") !== -1) {\n+            // Make sure the school value is a valid school name\n+            if (value && value.length && value !== \"all\" && value !== \"none\") {\n+              activeFilters[formattedName] = value;\n+            }\n+          } else {\n+            activeFilters[formattedName] = value;\n+          }\n+        }\n+      }\n+\n+      if (degreeTypesArray.length) {\n+        activeFilters.degreeTypes = degreeTypesArray;\n+      }\n+\n+      if (interestsArray.length) {\n+        activeFilters.interests = interestsArray;\n+      }\n+    },\n+\n+    getResultsSet: function () {\n+      var _this = this,\n+        result,\n+        title,\n+        interests,\n+        motivations,\n+        degreeTypes,\n+        schools,\n+        resultsCountText;\n+\n+      if (activeSection === \"discover\" || activeSection === \"undergraduate\") {\n+        for (var i = 0; i < undergraduateResults.length; i++) {\n+          result = undergraduateResults[i];\n+          title = result.title;\n+          interests = result.interests;\n+          schools = result.schools;\n+\n+          if (activeSection === \"discover\") {\n+            motivations = result.motivations;\n+          } else if (activeSection === \"undergraduate\") {\n+            degreeTypes = result.degreeTypes;\n+          }\n+\n+          _this.filterResult(\n+            result,\n+            title,\n+            interests,\n+            motivations,\n+            degreeTypes,\n+            schools\n+          );\n+        }\n+\n+        resultsCountText =\n+          \"You are seeing \" +\n+          resultsSetCount +\n+          \" out of \" +\n+          undergraduateResults.length +\n+          \" Undergraduate Degrees and Programs\"; // Set the results count text\n+      } else if (activeSection === \"graduate\") {\n+        for (var j = 0; j < graduateResults.length; j++) {\n+          result = graduateResults[j];\n+          title = result.title;\n+          degreeTypes = result.degreeTypes;\n+          schools = result.schools;\n+\n+          _this.filterResult(\n+            result,\n+            title,\n+            interests,\n+            motivations,\n+            degreeTypes,\n+            schools\n+          );\n+        }\n+\n+        resultsCountText =\n+          \"You are seeing \" +\n+          resultsSetCount +\n+          \" out of \" +\n+          graduateResults.length +\n+          \" Graduate Degrees and Programs\"; // Set the results count text\n+      }\n+\n+      $resultsCount.removeClass(\"faded-in\");\n+\n+      setTimeout(function () {\n+        $resultsCount.text(resultsCountText).addClass(\"faded-in\");\n+      }, 375);\n+\n+      // Discover section has unique lazyloading because of animations\n+      if (activeSection !== \"discover\") {\n+        setTimeout(function () {\n+          lazyLoadingPaused = false;\n+        }, standardTransitionTime * 2);\n+      }\n+    },\n+\n+    // Compares properties of a single result to the active filters set\n+    filterResult: function (\n+      result,\n+      title,\n+      interests,\n+      motivations,\n+      degreeTypes,\n+      schools\n+    ) {\n+      var _this = this;\n+\n+      // Keyword search is separate\n+      if (\n+        title !== undefined &&\n+        activeFilters.keyword !== undefined &&\n+        activeFilters.keyword !== \"\"\n+      ) {\n+        var formattedTitle = title.toLowerCase(),\n+          formattedKeyword = activeFilters.keyword.toLowerCase();\n+\n+        if (formattedTitle.indexOf(formattedKeyword) !== -1) {\n+          _this.addResultHTML(result); // Keyword match - add result\n+          return;\n+        }\n+      } else {\n+        var interestMatch = false,\n+          motivationMatch = false,\n+          degreeTypesMatch = false,\n+          schoolsMatch = false;\n+\n+        // Interests\n+        if (activeFilters.interests !== undefined) {\n+          if (interests !== undefined) {\n+            for (var i = 0; i < interests.length; i++) {\n+              var interest = interests[i];\n+\n+              if (activeFilters.interests.indexOf(interest) > -1) {\n+                interestMatch = true;\n+                break; // If it's a match already, no need to continue\n+              }\n+            }\n+          }\n+        } else {\n+          interestMatch = true;\n+        }\n+\n+        // Motivations\n+        if (activeFilters.motivation !== undefined) {\n+          if (\n+            motivations !== undefined &&\n+            motivations.indexOf(activeFilters.motivation) > -1\n+          ) {\n+            motivationMatch = true;\n+          }\n+        } else {\n+          motivationMatch = true;\n+        }\n+\n+        // Degree Types\n+        if (activeFilters.degreeTypes !== undefined) {\n+          if (activeFilters.degreeTypes.indexOf(\"all\") > -1) {\n+            degreeTypesMatch = true; // If all, it's a match by default\n+          } else if (degreeTypes !== undefined) {\n+            // Loop through the result's degree types\n+            for (var k = 0; k < degreeTypes.type.length; k++) {\n+              var degreeType = degreeTypes.type[k];\n+\n+              // If any of the result's degree types match a filter, it's a match\n+              if (activeFilters.degreeTypes.indexOf(degreeType) > -1) {\n+                degreeTypesMatch = true;\n+                break; // If it's a match already, no need to continue\n+              }\n+            }\n+          }\n+        } else {\n+          degreeTypesMatch = true;\n+        }\n+\n+        // Schools\n+        if (activeFilters.school !== undefined) {\n+          if (schools !== undefined) {\n+            for (var j = 0; j < schools.length; j++) {\n+              var school = schools[j];\n+\n+              if (activeFilters.school.indexOf(school) > -1) {\n+                schoolsMatch = true;\n+                break; // If it's a match already, no need to continue\n+              }\n+            }\n+          }\n+        } else {\n+          schoolsMatch = true;\n+        }\n+\n+        // If it's a match, add the result HTML to the results set\n+        if (\n+          interestMatch &&\n+          motivationMatch &&\n+          degreeTypesMatch &&\n+          schoolsMatch\n+        ) {\n+          _this.addResultHTML(result);\n+        }\n+      }\n+    },\n+\n+    addResultHTML: function (result) {\n+      var title = result.title.trim() || \"\",\n+        imgSrc,\n+        imgAlt,\n+        desc = result.desc || \"\",\n+        href = result.href || \"#\",\n+        degreeTypes = result.degreeTypes || \"\",\n+        degreeTypesHTML = \"\",\n+        campusHTML = \"\",\n+        resultHTML,\n+        startTermsHTML = \"\",\n+        linksHTML = \"\";\n+\n+      if (result.img) {\n+        imgSrc = result.img.src || \"\";\n+        imgAlt = result.img.alt || \"\";\n+      } else {\n+        imgSrc = \"\";\n+        imgAlt = \"\";\n+      }\n+\n+      // Only show this field if it's defined\n+      if (result.links) {\n+        console.log(\n+          \"stringified link length: \" +\n+            JSON.stringify(result.title + \" \" + result.links.length)\n+        );\n+\n+        if (result.links[0] !== undefined) {\n+          console.log(JSON.stringify(result.links[0]));\n+          console.log(\n+            \"link 0 label: \" +\n+              JSON.stringify(result.title + result.links[0].linkLabel)\n+          );\n+        }\n+        if (result.links[1] !== undefined) {\n+          console.log(\n+            \"link 1 label: \" + JSON.stringify(result.links[1].linkLabel)\n+          );\n+        }\n+        linksHTML += '<ul class=\"program-links\">';\n+        for (var i = 0; i < result.links.length; i++) {\n+          var linkPath = result.links[i].linkPath;\n+          var linkLabel = result.links[i].linkLabel;\n+          console.log;\n+          linksHTML +=\n+            `<a class=\"cu-button cu-button--white\" href=\"` +\n+            linkPath +\n+            `\">${linkLabel}</a>`;\n+        }\n+\n+        linksHTML += \"</ul>\";\n+      }\n+\n+      // Only show this field if it's defined\n+      if (result.startTerms) {\n+        startTermsHTML += '<ul class=\"start-terms\">';\n+        console.log(result.startTerms);\n+        for (var i = 0; i < result.startTerms.length; i++) {\n+          startTermsHTML += \"<li>\" + result.startTerms[i] + \"</li>\";\n+        }\n+\n+        startTermsHTML += \"</ul>\";\n+      }\n+\n+      // Only show this field if it's defined\n+      if (result.campus) {\n+        campusHTML += '<ul class=\"campuses\">';\n+\n+        for (var i = 0; i < result.campus.length; i++) {\n+          campusHTML += \"<li>\" + result.campus[i] + \"</li>\";\n+        }\n+\n+        campusHTML += \"</ul>\";\n+      }\n+\n+      // Only show this field if it's defined\n+      if (degreeTypes.title) {\n+        degreeTypesHTML = '<ul class=\"degree-types clearfix\">';\n+\n+        for (var j = 0; j < degreeTypes.title.length; j++) {\n+          degreeTypesHTML =\n+            degreeTypesHTML + \"<li>\" + degreeTypes.title[j] + \"</li>\";\n+        }\n+\n+        degreeTypesHTML = degreeTypesHTML + \"</ul>\";\n+      }\n+\n+      resultHTML =\n+        `<article class=\"wtf result visible columns small-12 clearfix\" data-program-title=\"${title}\">` +\n+        '<div class=\"image\" role=\"img\" data-src=\"' +\n+        imgSrc +\n+        '\" aria-label=\"' +\n+        imgAlt +\n+        '\">' +\n+        '<div class=\"active-content\">' +\n+        '<div class=\"active-content-inner\">' +\n+        '<p class=\"desc\">' +\n+        desc +\n+        \"</p>\" +\n+        '<a href=\"' +\n+        href +\n+        '\" title=\"View landing page for ' +\n+        title +\n+        ' program\">Learn More <svg class=\"icon icon-double-chevron\"><use xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"#icon-double-chevron\"></use></svg></a>' +\n+        \"</div>\" +\n+        \"</div>\" +\n+        '<a href=\"#\" class=\"active-content-toggle\"><svg class=\"icon icon-close\" title=\"Toggle result content\"><use xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"#icon-close\"></use></svg></a>' +\n+        \"</div>\" +\n+        '<div class=\"result-content\">' +\n+        '<h3 class=\"title\"><a href=\"' +\n+        href +\n+        '\" title=\"View landing page for ' +\n+        title +\n+        ' program\">' +\n+        title +\n+        \"</a></h3>\" +\n+        startTermsHTML +\n+        campusHTML +\n+        degreeTypesHTML +\n+        \"</div>\";\n+\n+      resultHTML =\n+        resultHTML +\n+        `<div class=\"relative-wrapper \">\n+      <div class=\"description\">\n+      \n+      <span class=\"triangle\">\n+      </span>\n+        <div class=\"title-wrapper\">\n+          <span class=\"title\">${title}</span> | <span class=\"program-type\">${result.degreeTypes.type}</span>\n+          <span class=\"close-icon\" aria-label=\"close\"></span>\n+      </div>\n+        <div class=\"program-description\">\n+        ${desc} \n+        </div>\n+        ${linksHTML}\n+        \n+      </div>\n+    </div>` +\n+        \"</article>\";\n+\n+      resultsSetItems.push(resultHTML);\n+      resultsSetCount++;\n+    },\n+\n+    clearResultsHTML: function () {\n+      $(\".dap-results .results-row\").empty();\n+    },\n+\n+    getUrlTypeQuery: function () {\n+      var _this = this,\n+        hash;\n+\n+      if (window.location.href.indexOf(\"?\") > -1) {\n+        var hashes = window.location.href\n+          .slice(window.location.href.indexOf(\"?\") + 1)\n+          .split(\"&\");\n+\n+        for (var i = 0; i < hashes.length; i++) {\n+          hash = hashes[i].split(\"=\");\n+\n+          if (hash[0] === \"type\") {\n+            // BREI's Version\n+            urlTypeQuery = hash[1].toLowerCase();\n+\n+            if (\n+              urlTypeQuery === \"undergraduate\" ||\n+              urlTypeQuery === \"graduate\"\n+            ) {\n+              _this.toggleSection($(\"#js-dap-section-\" + urlTypeQuery));\n+            } else if (urlTypeQuery === \"discover\") {\n+              _this.toggleSection($(\"#js-dap-section-\" + urlTypeQuery), false);\n+            }\n+\n+            return;\n+          } else if (hash[0] === \"startingtab\") {\n+            // Chapman's Version\n+            urlTypeQuery = hash[1].toString();\n+\n+            switch (urlTypeQuery) {\n+              case \"1\": // Majors\n+                _this.toggleSection($(\"#js-dap-section-undergraduate\"));\n+                $(\"#dap-undergraduate-program-major\").prop(\"checked\", true);\n+                break;\n+              case \"2\": // Minors\n+                _this.toggleSection($(\"#js-dap-section-undergraduate\"));\n+                $(\"#dap-undergraduate-program-minor\").prop(\"checked\", true);\n+                break;\n+              case \"3\": // 4+1\n+                _this.toggleSection($(\"#js-dap-section-undergraduate\"));\n+                $(\"#dap-undergraduate-program-bridge\").prop(\"checked\", true);\n+                break;\n+              case \"4\": // Graduate\n+                _this.toggleSection($(\"#js-dap-section-graduate\"));\n+                break;\n+            }\n+\n+            return;\n+          }\n+        }\n+      }\n+    },\n+\n+    initAutocompletes: function () {\n+      var keywordFields = $dapFeature.find('input[id*=\"keyword\"]'),\n+        undergraduateAutocompleteOptions = \"\",\n+        graduateAutocompleteOptions = \"\";\n+\n+      for (var i = 0; i < undergraduateProgramNames.length; i++) {\n+        undergraduateAutocompleteOptions +=\n+          '<option value=\"' + undergraduateProgramNames[i] + '\">';\n+      }\n+\n+      for (var j = 0; j < graduateProgramNames.length; j++) {\n+        graduateAutocompleteOptions +=\n+          '<option value=\"' + graduateProgramNames[j] + '\">';\n+      }\n+\n+      keywordFields.each(function () {\n+        var fieldID = $(this).attr(\"id\");\n+\n+        if (\n+          fieldID.indexOf(\"-discover\") !== -1 ||\n+          fieldID.indexOf(\"-undergraduate\") !== -1\n+        ) {\n+          $(this).autoComplete({\n+            minChars: 1,\n+            source: function (term, suggest) {\n+              suggest(undergraduateProgramNames);\n+            },\n+          });\n+        } else if (fieldID.indexOf(\"-graduate\") !== -1) {\n+          $(this).autoComplete({\n+            minChars: 1,\n+            source: function (term, suggest) {\n+              suggest(graduateProgramNames);\n+            },\n+          });\n+        }\n+      });\n+    },\n+\n+    titleAlphaSort: function (a, b) {\n+      if (a.title.trim() < b.title.trim()) {\n+        return -1;\n+      }\n+\n+      if (a.title.trim() > b.title.trim()) {\n+        return 1;\n+      }\n+\n+      return 0;\n+    },\n+\n+    applyHashFilters: function () {\n+      hashChangesActive = true;\n+\n+      var _this = this;\n+      var hashItems = window.location.hash.replace(\"#\", \"\").split(\"&\");\n+      var formType = _this.getHashValue(\"type\") || activeSection;\n+      var form = $(\"#js-dap-\" + formType + \"-form\");\n+      var noFilters = false;\n+\n+      _this.resetAllForms();\n+      _this.resetDiscoverMotivation();\n+      _this.resetDiscoverInterest();\n+\n+      for (var i = 0; i < hashItems.length; i++) {\n+        var filter = decodeURIComponent(hashItems[i].replace(/\\+/g, \"%20\")); // Remove any plus signs and code as spaces, then decode the filter\n+        var filterName = filter.substring(0, filter.indexOf(\"=\"));\n+        var filterValue = filter.substring(filter.indexOf(\"=\") + 1);\n+        var filterEl = $(\n+          '[name=\"' + filterName + '\"][value=\"' + filterValue + '\"]'\n+        ); // Get the element using the name and value. Standard filter element except for special cases below.\n+\n+        if (filterName === \"type\") {\n+          // Switch section on back/forward if necessary\n+          if (filterValue !== activeSection) {\n+            _this.toggleSection($(\"#js-dap-section-\" + filterValue));\n+          } else {\n+            continue;\n+          }\n+        } else if (filter.indexOf(\"keyword\") !== -1) {\n+          $('[name=\"' + filterName + '\"]').val(filterValue); // Set text input value\n+        } else if (filter.indexOf(\"school\") !== -1) {\n+          $('[name=\"' + filterName + '\"]')\n+            .val(filterValue)\n+            .change(); // Set select value and trigger change\n+        } else if (filter.indexOf(\"motivation\") !== -1) {\n+          var $motivationEl = $(\n+            '#js-dap-discover-motivations .motivation[data-motivation=\"' +\n+              filterValue +\n+              '\"]'\n+          );\n+\n+          _this.switchDiscoverMotivation($motivationEl);\n+        } else if (filter.indexOf(\"interest\") !== -1) {\n+          if (formType === \"discover\") {\n+            var $interestEl = $(\n+              '#js-dap-discover-interests .interest[data-interest=\"' +\n+                filterValue +\n+                '\"]'\n+            );\n+\n+            _this.switchDiscoverInterest($interestEl);\n+          } else {\n+            filterEl.prop(\"checked\", true); // Check the checkbox\n+          }\n+        } else {\n+          if (\n+            hashItems.length === 1 &&\n+            !filterName.length &&\n+            !filterValue.length\n+          ) {\n+            // No hash and no filters set!\n+\n+            if ($(\"#js-dap-section-\" + activeSection).hasClass(\"active\")) {\n+              noFilters = true;\n+              _this.toggleSection($(\"#js-dap-section-\" + activeSection)); // Close the section if it's open (which it should be)\n+            }\n+          } else {\n+            filterEl.prop(\"checked\", true); // Check the checkbox\n+          }\n+        }\n+      }\n+\n+      hashChangesActive = false;\n+\n+      if (!noFilters && formType && formType !== undefined && formType.length) {\n+        _this.resetFiltering(form);\n+      }\n+    },\n+\n+    getHashValue: function (key) {\n+      var matches = location.hash.match(new RegExp(key + \"=([^&]*)\"));\n+      return matches ? matches[1] : null;\n+    },\n+\n+    // Used to scroll to different points\n+    scrollToTarget: function (target) {\n+      headerOffset = parseInt($(\"html\").css(\"padding-top\").replace(\"px\", \"\"));\n+\n+      setTimeout(function () {\n+        isUserScroll = false;\n+\n+        $(\"html, body\").animate(\n+          {\n+            // scrollTop: $(target).offset().top - (headerOffset + 20),\n+          },\n+          standardTransitionTime,\n+          \"swing\",\n+          function () {\n+            setTimeout(function () {\n+              isUserScroll = true;\n+            }, 0);\n+          }\n+        );\n+      }, 250);\n+    },\n+\n+    scrollToResults: function () {\n+      var $resultsContainer = $(\"#js-dap-results-\" + activeSection);\n+      var resultsContainerHeight = $resultsContainer.outerHeight(true);\n+      var windowHeight = $(window).height();\n+      var bottomOfWindow = $(window).scrollTop() + windowHeight;\n+      var topOfResultsContainer = $resultsContainer.offset().top;\n+      var scrollPoint =\n+        topOfResultsContainer - (windowHeight - resultsContainerHeight);\n+\n+      // If the top of the results container isn't completely in view, scroll to it\n+      if (bottomOfWindow - resultsContainerHeight <= topOfResultsContainer) {\n+        $(\"html, body\").animate(\n+          {\n+            scrollTop: scrollPoint,\n+          },\n+          standardTransitionTime,\n+          \"swing\",\n+          function () {\n+            setTimeout(function () {\n+              isUserScroll = true;\n+            }, 0);\n+          }\n+        );\n+      }\n+    },\n+  };\n })(window.jQuery, window.Modernizr, window, window.document);\n \n $(function () {\n+  \"use strict\";\n+  var elem = document.querySelector(\"nav\");\n+  elem.style.display = \"none\";\n \n-\t'use strict';\n-\n-\tchapman.degreesAndPrograms.init();\n-\n+  chapman.degreesAndProgramsApp.init();\n });\n"
                },
                {
                    "date": 1628812932773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1306 +1,68 @@\n /*global window:false */\n /*global $:false */\n-/*global location:false */\n /*jslint plusplus: true */\n \n var chapman = chapman || {};\n \n (function ($, Modernizr, window, document) {\n-  \"use strict\";\n-  var activeSection = \"\", // Active section (discover, undergraduate, or graduate)\n-    activeFilters = [],\n-    allResults = [],\n-    undergraduateResults = [],\n-    graduateResults = [],\n-    undergraduateProgramNames = [],\n-    graduateProgramNames = [],\n-    resultsSetItems = [],\n-    resultsSetItemsLoaded = 0,\n-    lazyLoadingPaused = true,\n-    lazyLoadingIntervalTime = 200,\n-    resultsSetCount = 0,\n-    isTransitioning = false, // Flag for transitioning between sections\n-    isUserScroll = true, // Flag for scrolling caused by user vs. animation\n-    transitioningClass = \"is-transitioning\",\n-    urlTypeQuery = \"\",\n-    $dapFeature = $(\"#js-dap-feature\"),\n-    $resultsCount = $(\".results-count\"),\n-    activeClass = \"active\",\n-    standardTransitionTime = 0,\n-    isFormChangeEvent = false,\n-    hashChangesActive = false,\n-    isMobile = Modernizr.mq(\"(max-width: 1023px)\"),\n-    scrollPosition = $(window).scrollTop(),\n-    headerOffset = parseInt($(\"html\").css(\"padding-top\").replace(\"px\", \"\")),\n-    dap = {\n-      //----- Discover Section -----//\n-      discover: {\n-        fieldNamePrefix: \"dap-discover-\",\n-        activeMotivation: \"\",\n-        $motivationsItems: $(\"#js-dap-discover-motivations .motivation\"),\n-        activeInterest: \"\",\n-        $interests: $(\"#js-dap-discover-interests\"),\n-        $interestsItems: $(\"#js-dap-discover-interests .interest\"),\n-        $keywordForm: $(\"#js-dap-discover-keyword-form\"),\n-        $results: $(\"#js-dap-results-discover\"),\n-      },\n \n-      //----- Undergraduate Section -----//\n-      undergraduate: {\n-        fieldNamePrefix: \"dap-undergraduate-\",\n-        $programTypes: $(\"#js-dap-undergraduate-program-types\"),\n-        $interests: $(\"#js-dap-undergraduate-interests\"),\n-        $interestsItems: $(\"#js-dap-undergraduate-interests input\"),\n-        $resetInterests: $(\"#js-reset-undergraduate-interests\"),\n-        $filterTypes: $(\"#js-dap-undergraduate-filter-types\"),\n-        $results: $(\"#js-dap-results-undergraduate\"),\n-      },\n+\t'use strict';\n \n-      //----- Graduate Section -----//\n-      graduate: {\n-        fieldNamePrefix: \"dap-graduate-\",\n-        $programTypes: $(\"#js-dap-graduate-program-types\"),\n-        $filterTypes: $(\"#js-dap-graduate-filter-types\"),\n-        $results: $(\"#js-dap-results-graduate\"),\n-      },\n-    };\n+\tchapman.degreesAndPrograms = {\n \n-  chapman.degreesAndProgramsApp = {\n-    init: function () {\n-      this.getProgramsData();\n-      this.bindUIEvents();\n-      this.getUrlTypeQuery();\n-      this.initLazyLoadingInterval();\n-    },\n+\t\tinit: function () {\n \n-    bindUIEvents: function () {\n-      var _this = this;\n+\t\t\t$('.degrees-and-programs').addClass('ready');\n \n-      //-------- Global Events --------//\n+\t\t\tthis.bindUIEvents();\n \n-      $(window).on(\"scroll resize\", function () {\n-        if (isUserScroll) {\n-          lazyLoadingPaused = false;\n-        }\n+\t\t},\n \n-        isMobile = Modernizr.mq(\"(max-width: 1023px)\"); // Reset this if screen size changes\n-        scrollPosition = $(window).scrollTop();\n-      });\n+\t\tbindUIEvents: function () {\n \n-      // Click on any section's accordion trigger\n-      $(\".dap-section-accordion-trigger\").on(\"click\", function () {\n-        if (!isTransitioning) {\n-          _this.toggleSection($(this));\n-        }\n-      });\n+\t\t\t$('.results-views li').on('click', function () {\n+\t\t\t\tchapman.degreesAndPrograms.switchResultsView($(this));\n+\t\t\t});\n \n-      // Form change in any section\n-      $(\"#js-dap-feature form\")\n-        .on(\"change\", function (event) {\n-          isFormChangeEvent = true;\n+\t\t\t$('.dap-results').on('click', '.active-content-toggle', function (event) {\n+\t\t\t\tevent.preventDefault();\n+\t\t\t\t$(this).closest('.result').toggleClass('active');\n+\t\t\t});\n \n-          if (!hashChangesActive) {\n-            var form = $(this),\n-              target = $(event.target),\n-              hash = form.serialize();\n+\t\t\t$('#js-dap-undergraduate-interests .show-more a').on('click', function () {\n+\t\t\t\t$('#js-dap-undergraduate-interests-list').addClass('show-all');\n+\t\t\t});\n \n-            if (target.attr(\"id\").indexOf(\"keyword\") !== -1) {\n-              var keywordVal = target.val();\n+\t\t},\n \n-              // If using the keyword search in the Discover section...\n-              if (activeSection === \"discover\") {\n-                var trigger = $(\"#js-dap-section-undergraduate .dap-body\");\n+\t\tswitchResultsView: function (el) {\n+\t\t\tvar viewButton = el,\n+\t\t\t\tnewView = viewButton.data('view'),\n+\t\t\t\tresults = viewButton.closest('.dap-results');\n \n-                // Jump to Undergraduate section to search by keyword\n-                $(\"#dap-undergraduate-keyword\").val(keywordVal);\n-                _this.toggleSection(\n-                  $(\"#js-dap-section-undergraduate\"),\n-                  trigger\n-                );\n-                _this.applyHashFilters(); // This is a special case where the hash filters must be applied even though there was a form event\n-              } else {\n-                // Otherwise reset the rest of the form\n-                _this.resetForm(form);\n-                target.val(keywordVal);\n+\t\t\tif (!(viewButton.hasClass('active'))) {\n \n-                window.location.hash = hash; // Update the hash so history is enabled\n-                _this.resetFiltering(form);\n-              }\n-            } else {\n-              form.find('input[id*=\"keyword\"]').val(\"\");\n-              window.location.hash = hash; // Update the hash so history is enabled\n-              _this.resetFiltering(form);\n-            }\n+\t\t\t\tviewButton.closest('.results-views').find('li').removeClass('active');\n+\t\t\t\tviewButton.addClass('active');\n \n-            setTimeout(function () {\n-              _this.scrollToResults();\n-            }, 100);\n-          }\n-        })\n-        .on(\"submit\", function (event) {\n-          event.preventDefault();\n-        });\n+\t\t\t\tif (newView === 'grid-view') {\n+\t\t\t\t\tresults.removeClass('list-view').addClass('grid-view');\n+\t\t\t\t} else if (newView === 'list-view') {\n+\t\t\t\t\tresults.removeClass('grid-view').addClass('list-view');\n+\t\t\t\t}\n \n-      // On forward/back\n-      $(window).on(\"hashchange\", function (event) {\n-        // Only do hash filtering if the event wasn't from the DOM\n-        if (!isFormChangeEvent && !hashChangesActive) {\n-          _this.applyHashFilters();\n-        }\n+\t\t\t}\n \n-        isFormChangeEvent = false; // Reset flag\n-      });\n+\t\t}\n \n-      //-------- Discover Events --------//\n+\t};\n \n-      // Click on Motivations in Discover section\n-      dap.discover.$motivationsItems.on(\"click\", function (event) {\n-        if ($(event.target).is(\"input\")) {\n-          _this.switchDiscoverMotivation($(this));\n-        }\n-      });\n+})(window.jQuery, window.Modernizr, window, window.document);\n \n-      // Click on Interests in Discover section\n-      dap.discover.$interestsItems.on(\"click\", function (event) {\n-        if ($(event.target).is(\"input\")) {\n-          _this.switchDiscoverInterest($(this));\n-        }\n-      });\n+$(function () {\n \n-      //-------- Undergraduate Events --------//\n+\t'use strict';\n \n-      // Click on Reset button in Undergraduate section\n-      dap.undergraduate.$resetInterests.on(\"click\", function () {\n-        dap.undergraduate.$interestsItems.prop(\"checked\", false);\n-        _this.resetFiltering($(this).closest(\"form\"));\n-      });\n+\tchapman.degreesAndPrograms.init();\n \n-      // Click on Program Types buttons in Undergraduate section\n-      dap.undergraduate.$programTypes.on(\n-        \"change\",\n-        \".program-type input\",\n-        function () {\n-          _this.syncUndergraduateProgramTypes($(this));\n-        }\n-      );\n-\n-      $(\"form\").on(\"change\", function (event) {\n-        var form = $(this),\n-          target = $(event.target);\n-\n-        if (target.attr(\"id\").indexOf(\"keyword\") !== -1) {\n-          var keywordVal = target.val();\n-\n-          // If using the keyword search in the Discover section...\n-          if (activeSection === \"discover\") {\n-            var trigger = $(\n-              \"#js-dap-section-undergraduate .dap-section-accordion-trigger\"\n-            );\n-\n-            // Jump to Undergraduate section to search by keyword\n-            _this.toggleSection($(\"#js-dap-section-undergraduate\"), trigger);\n-            $(\"#dap-undergraduate-keyword\").val(keywordVal);\n-          } else {\n-            // Otherwise reset the rest of the form\n-            _this.resetForm(form);\n-            target.val(keywordVal);\n-          }\n-        }\n-      });\n-\n-      //-------- Graduate Events --------//\n-\n-      // Click on Program Types buttons in Graduate section\n-      dap.graduate.$programTypes.on(\n-        \"change\",\n-        \".program-type input\",\n-        function () {\n-          _this.syncGraduateProgramTypes($(this));\n-        }\n-      );\n-    },\n-\n-    resetFiltering: function (form) {\n-      if (form !== undefined && form.length > 0) {\n-        var _this = this;\n-\n-        activeFilters = []; // Clear filters\n-        _this.clearResultsHTML(); // Clear results markup\n-        dap.discover.$keywordForm.hide();\n-        resultsSetItems = [];\n-        resultsSetItemsLoaded = 0;\n-        resultsSetCount = 0; // Reset result counter\n-        _this.getActiveFilters(form);\n-        _this.getResultsSet();\n-      }\n-    },\n-\n-    resetForm: function (form) {\n-      if (form !== undefined && form.length > 0) {\n-        var formSelects = form.find(\"select\");\n-\n-        form[0].reset();\n-\n-        // Reset custom selects\n-        if (formSelects && formSelects.length) {\n-          for (var i = 0; i < formSelects.length; i++) {\n-            var select = $(formSelects[i]);\n-            chapman.customSelect.resetSelect(select);\n-          }\n-        }\n-      }\n-    },\n-\n-    resetAllForms: function () {\n-      var _this = this;\n-\n-      for (var type in dap) {\n-        // Get all dap objects\n-        if (dap.hasOwnProperty(type)) {\n-          _this.resetForm($(\"#js-\" + dap[type].fieldNamePrefix + \"form\"));\n-        }\n-      }\n-    },\n-\n-    getProgramsData: function () {\n-      var _this = this,\n-        jsonUrl = $dapFeature.data(\"json-url\");\n-      console.log(\"json url: \" + jsonUrl);\n-      $.ajax({\n-        type: \"GET\",\n-        url: jsonUrl,\n-        dataType: \"text\",\n-        success: function (json) {\n-          console.log(JSON.stringify(json));\n-          var data = $.parseJSON(json);\n-\n-          // console.log(\"data \" + JSON.stringify(data));\n-\n-          allResults = data.results;\n-\n-          for (var i = 0; i < allResults.length; i++) {\n-            var result = allResults[i],\n-              type = result.type || \"\",\n-              isUndergradAndGrad = false;\n-\n-            // Fallback in case no degree type is specified\n-            if (result.degreeTypes !== undefined) {\n-              // Check if this result is an accelerated or bridge program\n-              for (var j = 0; j < result.degreeTypes.type.length; j++) {\n-                var degreeType = result.degreeTypes.type[j];\n-\n-                if (degreeType) {\n-                  var degreeTypeFormatted = degreeType.toLowerCase();\n-\n-                  // Any of the following count as bridge/accelerated\n-                  if (\n-                    degreeTypeFormatted === \"bridge\" ||\n-                    degreeTypeFormatted === \"integrated/4+1\" ||\n-                    degreeTypeFormatted === \"accelerated 3+2\"\n-                  ) {\n-                    isUndergradAndGrad = true;\n-                    break;\n-                  }\n-                }\n-              }\n-            }\n-\n-            // If it's a bridge or accelerated program, it's both undergraduate and graduate\n-            if (isUndergradAndGrad) {\n-              undergraduateResults.push(result);\n-              graduateResults.push(result);\n-              undergraduateProgramNames.push(result.title);\n-              graduateProgramNames.push(result.title);\n-            } else {\n-              if (/^undergraduate/.test(type)) {\n-                undergraduateResults.push(result);\n-                undergraduateProgramNames.push(result.title);\n-              }\n-\n-              if (/^graduate/.test(type)) {\n-                graduateResults.push(result);\n-                graduateProgramNames.push(result.title);\n-              }\n-            }\n-          }\n-\n-          // Alphabetically sort everything\n-          undergraduateProgramNames.sort();\n-          graduateProgramNames.sort();\n-          undergraduateResults.sort(_this.titleAlphaSort);\n-          graduateResults.sort(_this.titleAlphaSort);\n-\n-          _this.initAutocompletes();\n-          _this.applyHashFilters();\n-        },\n-        error: function (e) {\n-          console.error(\"Error loading programs feed.\");\n-        },\n-      });\n-    },\n-\n-    initLazyLoadingInterval: function () {\n-      var _this = this;\n-\n-      setInterval(function () {\n-        if (\n-          !lazyLoadingPaused &&\n-          activeSection !== undefined &&\n-          activeSection !== \"\"\n-        ) {\n-          _this.lazyLoadResults();\n-        }\n-      }, lazyLoadingIntervalTime);\n-    },\n-\n-    lazyLoadResults: function () {\n-      var _this = this;\n-      var $resultsContainer = $(\"#js-dap-results-\" + activeSection);\n-      var bottomOfResultsContainer;\n-      var windowHeight = $(window).height();\n-      var bottomOfWindow = scrollPosition + windowHeight;\n-      var scrollThreshold = bottomOfWindow + windowHeight * 0.33;\n-      var result = $(resultsSetItems[resultsSetItemsLoaded]);\n-\n-      if (resultsSetItemsLoaded < resultsSetItems.length && result.length) {\n-        // If there are results left to load\n-\n-        $(\"#js-dap-results-\" + activeSection + \" .results-row\").append(result); // Append the result\n-        var $result = $(result); // Store previously appended result as variable\n-        bottomOfResultsContainer =\n-          $resultsContainer.offset().top + $resultsContainer.outerHeight(true); // Recalculate container's height with new result\n-\n-        if (\n-          scrollThreshold >= bottomOfResultsContainer &&\n-          $resultsContainer.is(\":visible\")\n-        ) {\n-          // If the user is past the scroll threshold\n-          _this.fadeInResult($result); // Fade the result in\n-          resultsSetItemsLoaded++; // Move to the next result\n-        } else {\n-          $result.remove(); // Otherwise remove it and wait until there's more room\n-          lazyLoadingPaused = true;\n-        }\n-      } else {\n-        lazyLoadingPaused = true;\n-\n-        if (activeSection === \"discover\") {\n-          // Open the keyword form\n-          dap.discover.$keywordForm.slideDown(\n-            standardTransitionTime,\n-            function () {\n-              $(this).css(\"overflow\", \"visible\");\n-            }\n-          );\n-        }\n-      }\n-    },\n-\n-    fadeInResult: function (result) {\n-      var image = result.find(\".image\"),\n-        imageSrc = image.data(\"src\") || \"\",\n-        desc = result.find(\".result-content .desc\"),\n-        activeContentInner = result.find(\".active-content-inner\");\n-\n-      // Truncate description\n-      if (desc.length) {\n-        desc.dotdotdot({\n-          watch: true,\n-        });\n-      }\n-\n-      // Truncate content container\n-      if (activeContentInner.length) {\n-        activeContentInner.dotdotdot({\n-          watch: true,\n-          after: \"a\",\n-        });\n-      }\n-\n-      // Load the images dynamically\n-      if (image.length) {\n-        image.css(\"background-image\", \"url(\" + imageSrc + \")\");\n-      }\n-\n-      setTimeout(function () {\n-        result.addClass(\"faded-in\");\n-      }, 100);\n-    },\n-\n-    toggleSection: function (el, scrollEl) {\n-      var _this = this,\n-        section = el.closest(\".dap-section\"),\n-        sectionBody = section.find(\".dap-body\"),\n-        sectionID = section.data(\"id\"),\n-        form;\n-\n-      isTransitioning = true;\n-      $dapFeature.addClass(transitioningClass);\n-\n-      // Reset the previously opened section\n-      if (\n-        activeSection !== undefined &&\n-        activeSection !== \"\" &&\n-        $(\"#js-dap-\" + activeSection + \"-form\").length > 0\n-      ) {\n-        form = $(\"#js-dap-\" + activeSection + \"-form\");\n-        // _this.resetFiltering(form);\n-        _this.resetForm(form);\n-      }\n-\n-      _this.resetDiscoverMotivation();\n-      _this.resetDiscoverInterest();\n-\n-      if (sectionID !== \"discover\") {\n-        _this.closeDiscoverMotivationPanel();\n-        _this.closeDiscoverInterestPanel();\n-      }\n-\n-      if (section.hasClass(\"active\")) {\n-        // If the section is open, close it\n-        var activeResults = $(\n-          \"#js-dap-results-\" + activeSection + \" .results-row .result\"\n-        );\n-\n-        section.removeClass(\"active\");\n-        activeResults.removeClass(\"faded-in\");\n-        setTimeout(function () {\n-          activeResults.removeClass(\"visible\");\n-\n-          // Close the section\n-          sectionBody.slideUp(standardTransitionTime, function () {\n-            isTransitioning = false;\n-            $dapFeature.removeClass(transitioningClass);\n-          });\n-\n-          activeSection = \"\"; // Clear the active section\n-        }, 500);\n-      } else {\n-        // Otherwise close the old section and open the new one\n-\n-        activeSection = sectionID; // Change the active section\n-        form = $(\"#js-dap-\" + activeSection + \"-form\");\n-\n-        if (!hashChangesActive) {\n-          // _this.resetFiltering(form); // Check for filters preset (potentially from query string)\n-\n-          // Update the hash so history is enabled\n-          var oldHash = window.location.hash.replace(\"#\", \"\");\n-          var newHash = form.serialize();\n-          window.location.hash = newHash; // Triggers hash change most of the time\n-\n-          if (oldHash === newHash) {\n-            _this.applyHashFilters(); // Applies filters if the page is reloaded with the same hash\n-          }\n-        }\n-\n-        var newSectionTransitionDelay = standardTransitionTime;\n-\n-        if ($(\".dap-section.active\").length) {\n-          // Close old section\n-          $(\".dap-section.active .dap-body\").slideUp(standardTransitionTime);\n-          $(\".dap-section.active\").removeClass(\"active\");\n-          $resultsCount.removeClass(\"faded-in\");\n-        } else {\n-          newSectionTransitionDelay = 0; // No delay required if there's no old section to close\n-        }\n-\n-        setTimeout(function () {\n-          // Wait until old section is closed (if there is one)\n-\n-          // Open new section\n-          section.addClass(\"active\");\n-          sectionBody.slideDown(standardTransitionTime, function () {\n-            $(this).css(\"overflow\", \"visible\");\n-\n-            // Wait to do the following until new section is opened\n-            var scrollToSectionTime = 1000,\n-              scrollPoint;\n-\n-            headerOffset = parseInt();\n-            // $(\"html\").css(\"padding-top\").replace(\"px\", \"\")\n-\n-            // Scroll to new section\n-            if (scrollEl) {\n-              scrollPoint = scrollEl.offset().top - headerOffset;\n-            } else if (scrollEl === undefined) {\n-              scrollPoint = section.offset().top - headerOffset;\n-            }\n-\n-            if (scrollPoint) {\n-              isUserScroll = false;\n-\n-              $(\"html, body\").animate(\n-                {\n-                  scrollTop: scrollPoint,\n-                },\n-                scrollToSectionTime,\n-                \"swing\",\n-                function () {\n-                  isTransitioning = false;\n-\n-                  setTimeout(function () {\n-                    isUserScroll = true;\n-                  }, 100);\n-\n-                  $dapFeature.removeClass(transitioningClass);\n-                }\n-              );\n-            } else {\n-              isTransitioning = false;\n-              $dapFeature.removeClass(transitioningClass);\n-            }\n-          });\n-        }, newSectionTransitionDelay);\n-      }\n-    },\n-\n-    switchDiscoverMotivation: function (el) {\n-      if (!el.hasClass(activeClass)) {\n-        var motivation = el.data(\"motivation\"),\n-          $motivationInterests = $(\n-            '#js-dap-discover-interests .interest[data-category=\"' +\n-              motivation +\n-              '\"]'\n-          );\n-\n-        dap.discover.$interests.find(\"input\").prop(\"checked\", false); // Reset interests\n-        dap.discover.activeMotivation = motivation; // Change the active motivation\n-        el.find(\"input\").prop(\"checked\", true); // Make sure the motivation's input is checked if it's not already\n-\n-        // Reset motivations, then activate the current one\n-        dap.discover.$motivationsItems.removeClass(activeClass);\n-        el.addClass(activeClass);\n-\n-        // Reset interests, then show/fade in interests of the chosen motivation\n-        dap.discover.$interestsItems.removeClass(\"faded-in\");\n-        dap.discover.$interests.removeClass(\"interest-active\");\n-\n-        dap.discover.$interestsItems.removeClass(\"visible\"); // Hide all interests by default\n-        $motivationInterests.addClass(\"visible\"); // Only show interests of this motivation\n-\n-        dap.discover.$interests.slideDown(standardTransitionTime, function () {\n-          // Then slide down the interests section\n-          $(this).css(\"overflow\", \"visible\");\n-\n-          $motivationInterests.addClass(\"faded-in\");\n-\n-          // Open the results section\n-          dap.discover.$results.slideDown(standardTransitionTime, function () {\n-            $(this).css(\"overflow\", \"visible\");\n-\n-            setTimeout(function () {\n-              lazyLoadingPaused = false;\n-            }, standardTransitionTime / 2);\n-          });\n-        });\n-      }\n-    },\n-\n-    resetDiscoverMotivation: function () {\n-      dap.discover.activeMotivation = \"\";\n-      dap.discover.$motivationsItems.removeClass(activeClass);\n-    },\n-\n-    closeDiscoverMotivationPanel: function () {\n-      dap.discover.$interests.slideUp(standardTransitionTime);\n-      dap.discover.$keywordForm.hide();\n-\n-      setTimeout(function () {\n-        dap.discover.$interestsItems.removeClass(\"faded-in visible\");\n-      }, standardTransitionTime);\n-    },\n-\n-    switchDiscoverInterest: function (el) {\n-      if (!el.hasClass(activeClass)) {\n-        var interest = el.data(\"interest\");\n-\n-        // Change the active interest\n-        dap.discover.activeInterest = interest;\n-        dap.discover.$interests.addClass(\"interest-active\");\n-\n-        // Remove active state from any other interests, then make the new one active\n-        dap.discover.$interestsItems.removeClass(activeClass);\n-        el.addClass(activeClass);\n-        el.find(\"input\").prop(\"checked\", true); // Make sure the interest's input is checked if it's not already\n-\n-        lazyLoadingPaused = false;\n-      }\n-    },\n-\n-    resetDiscoverInterest: function () {\n-      dap.discover.activeInterest = \"\";\n-      dap.discover.$interestsItems.removeClass(activeClass);\n-    },\n-\n-    closeDiscoverInterestPanel: function () {\n-      dap.discover.$interests.removeClass(\"interest-active\");\n-      dap.discover.$results.slideUp(standardTransitionTime);\n-    },\n-\n-    /*\n-\t\t\tIn the Undergraduate section, All Programs cannot be selected when other program types are selected.\n-\t\t\tInversely, when other program types are selected, All Programs cannot be selected.\n-\t\t\tThis function selects/deselects inputs accordingly.\n-\t\t*/\n-    syncUndergraduateProgramTypes: function (el) {\n-      var allProgramsID = \"dap-undergraduate-program-all\",\n-        inputID = el.attr(\"id\");\n-\n-      if (inputID === allProgramsID) {\n-        dap.undergraduate.$programTypes\n-          .find(\"input\")\n-          .not(el)\n-          .prop(\"checked\", false);\n-      } else {\n-        $(\"#\" + allProgramsID).prop(\"checked\", false);\n-      }\n-    },\n-\n-    /*\n-\t\t\tIn the Graduate section, All Programs cannot be selected when other program types are selected.\n-\t\t\tInversely, when other program types are selected, All Programs cannot be selected.\n-\t\t\tThis function selects/deselects inputs accordingly.\n-\t\t*/\n-    syncGraduateProgramTypes: function (el) {\n-      var allProgramsID = \"dap-graduate-program-all\",\n-        inputID = el.attr(\"id\");\n-\n-      if (inputID === allProgramsID) {\n-        dap.graduate.$programTypes.find(\"input\").not(el).prop(\"checked\", false);\n-      } else {\n-        $(\"#\" + allProgramsID).prop(\"checked\", false);\n-      }\n-    },\n-\n-    getActiveFilters: function (form) {\n-      var formData = form.serializeArray(),\n-        degreeTypesArray = [], // Used for storing degree types\n-        interestsArray = [];\n-\n-      for (var i = 0; i < formData.length; i++) {\n-        var filter = formData[i],\n-          name = filter.name,\n-          formattedName,\n-          value = filter.value;\n-\n-        formattedName = name.replace(dap[activeSection].fieldNamePrefix, \"\"); // Remove form name prefixes\n-\n-        // If there is a value\n-        if (value.length > 0) {\n-          if (formattedName.indexOf(\"program\") !== -1) {\n-            // Push to array if a program\n-            var valuesArray = value.split(\",\");\n-\n-            // Loop through all values associated with the filter\n-            for (var j = 0; j < valuesArray.length; j++) {\n-              var programType = valuesArray[j];\n-\n-              // Add each to the degree types array\n-              if (degreeTypesArray.indexOf(programType) === -1) {\n-                degreeTypesArray.push(programType);\n-              }\n-            }\n-          } else if (formattedName.indexOf(\"interest\") !== -1) {\n-            // Push to array if an interest\n-            interestsArray.push(value);\n-          } else if (formattedName.indexOf(\"school\") !== -1) {\n-            // Make sure the school value is a valid school name\n-            if (value && value.length && value !== \"all\" && value !== \"none\") {\n-              activeFilters[formattedName] = value;\n-            }\n-          } else {\n-            activeFilters[formattedName] = value;\n-          }\n-        }\n-      }\n-\n-      if (degreeTypesArray.length) {\n-        activeFilters.degreeTypes = degreeTypesArray;\n-      }\n-\n-      if (interestsArray.length) {\n-        activeFilters.interests = interestsArray;\n-      }\n-    },\n-\n-    getResultsSet: function () {\n-      var _this = this,\n-        result,\n-        title,\n-        interests,\n-        motivations,\n-        degreeTypes,\n-        schools,\n-        resultsCountText;\n-\n-      if (activeSection === \"discover\" || activeSection === \"undergraduate\") {\n-        for (var i = 0; i < undergraduateResults.length; i++) {\n-          result = undergraduateResults[i];\n-          title = result.title;\n-          interests = result.interests;\n-          schools = result.schools;\n-\n-          if (activeSection === \"discover\") {\n-            motivations = result.motivations;\n-          } else if (activeSection === \"undergraduate\") {\n-            degreeTypes = result.degreeTypes;\n-          }\n-\n-          _this.filterResult(\n-            result,\n-            title,\n-            interests,\n-            motivations,\n-            degreeTypes,\n-            schools\n-          );\n-        }\n-\n-        resultsCountText =\n-          \"You are seeing \" +\n-          resultsSetCount +\n-          \" out of \" +\n-          undergraduateResults.length +\n-          \" Undergraduate Degrees and Programs\"; // Set the results count text\n-      } else if (activeSection === \"graduate\") {\n-        for (var j = 0; j < graduateResults.length; j++) {\n-          result = graduateResults[j];\n-          title = result.title;\n-          degreeTypes = result.degreeTypes;\n-          schools = result.schools;\n-\n-          _this.filterResult(\n-            result,\n-            title,\n-            interests,\n-            motivations,\n-            degreeTypes,\n-            schools\n-          );\n-        }\n-\n-        resultsCountText =\n-          \"You are seeing \" +\n-          resultsSetCount +\n-          \" out of \" +\n-          graduateResults.length +\n-          \" Graduate Degrees and Programs\"; // Set the results count text\n-      }\n-\n-      $resultsCount.removeClass(\"faded-in\");\n-\n-      setTimeout(function () {\n-        $resultsCount.text(resultsCountText).addClass(\"faded-in\");\n-      }, 375);\n-\n-      // Discover section has unique lazyloading because of animations\n-      if (activeSection !== \"discover\") {\n-        setTimeout(function () {\n-          lazyLoadingPaused = false;\n-        }, standardTransitionTime * 2);\n-      }\n-    },\n-\n-    // Compares properties of a single result to the active filters set\n-    filterResult: function (\n-      result,\n-      title,\n-      interests,\n-      motivations,\n-      degreeTypes,\n-      schools\n-    ) {\n-      var _this = this;\n-\n-      // Keyword search is separate\n-      if (\n-        title !== undefined &&\n-        activeFilters.keyword !== undefined &&\n-        activeFilters.keyword !== \"\"\n-      ) {\n-        var formattedTitle = title.toLowerCase(),\n-          formattedKeyword = activeFilters.keyword.toLowerCase();\n-\n-        if (formattedTitle.indexOf(formattedKeyword) !== -1) {\n-          _this.addResultHTML(result); // Keyword match - add result\n-          return;\n-        }\n-      } else {\n-        var interestMatch = false,\n-          motivationMatch = false,\n-          degreeTypesMatch = false,\n-          schoolsMatch = false;\n-\n-        // Interests\n-        if (activeFilters.interests !== undefined) {\n-          if (interests !== undefined) {\n-            for (var i = 0; i < interests.length; i++) {\n-              var interest = interests[i];\n-\n-              if (activeFilters.interests.indexOf(interest) > -1) {\n-                interestMatch = true;\n-                break; // If it's a match already, no need to continue\n-              }\n-            }\n-          }\n-        } else {\n-          interestMatch = true;\n-        }\n-\n-        // Motivations\n-        if (activeFilters.motivation !== undefined) {\n-          if (\n-            motivations !== undefined &&\n-            motivations.indexOf(activeFilters.motivation) > -1\n-          ) {\n-            motivationMatch = true;\n-          }\n-        } else {\n-          motivationMatch = true;\n-        }\n-\n-        // Degree Types\n-        if (activeFilters.degreeTypes !== undefined) {\n-          if (activeFilters.degreeTypes.indexOf(\"all\") > -1) {\n-            degreeTypesMatch = true; // If all, it's a match by default\n-          } else if (degreeTypes !== undefined) {\n-            // Loop through the result's degree types\n-            for (var k = 0; k < degreeTypes.type.length; k++) {\n-              var degreeType = degreeTypes.type[k];\n-\n-              // If any of the result's degree types match a filter, it's a match\n-              if (activeFilters.degreeTypes.indexOf(degreeType) > -1) {\n-                degreeTypesMatch = true;\n-                break; // If it's a match already, no need to continue\n-              }\n-            }\n-          }\n-        } else {\n-          degreeTypesMatch = true;\n-        }\n-\n-        // Schools\n-        if (activeFilters.school !== undefined) {\n-          if (schools !== undefined) {\n-            for (var j = 0; j < schools.length; j++) {\n-              var school = schools[j];\n-\n-              if (activeFilters.school.indexOf(school) > -1) {\n-                schoolsMatch = true;\n-                break; // If it's a match already, no need to continue\n-              }\n-            }\n-          }\n-        } else {\n-          schoolsMatch = true;\n-        }\n-\n-        // If it's a match, add the result HTML to the results set\n-        if (\n-          interestMatch &&\n-          motivationMatch &&\n-          degreeTypesMatch &&\n-          schoolsMatch\n-        ) {\n-          _this.addResultHTML(result);\n-        }\n-      }\n-    },\n-\n-    addResultHTML: function (result) {\n-      var title = result.title.trim() || \"\",\n-        imgSrc,\n-        imgAlt,\n-        desc = result.desc || \"\",\n-        href = result.href || \"#\",\n-        degreeTypes = result.degreeTypes || \"\",\n-        degreeTypesHTML = \"\",\n-        campusHTML = \"\",\n-        resultHTML,\n-        startTermsHTML = \"\",\n-        linksHTML = \"\";\n-\n-      if (result.img) {\n-        imgSrc = result.img.src || \"\";\n-        imgAlt = result.img.alt || \"\";\n-      } else {\n-        imgSrc = \"\";\n-        imgAlt = \"\";\n-      }\n-\n-      // Only show this field if it's defined\n-      if (result.links) {\n-        console.log(\n-          \"stringified link length: \" +\n-            JSON.stringify(result.title + \" \" + result.links.length)\n-        );\n-\n-        if (result.links[0] !== undefined) {\n-          console.log(JSON.stringify(result.links[0]));\n-          console.log(\n-            \"link 0 label: \" +\n-              JSON.stringify(result.title + result.links[0].linkLabel)\n-          );\n-        }\n-        if (result.links[1] !== undefined) {\n-          console.log(\n-            \"link 1 label: \" + JSON.stringify(result.links[1].linkLabel)\n-          );\n-        }\n-        linksHTML += '<ul class=\"program-links\">';\n-        for (var i = 0; i < result.links.length; i++) {\n-          var linkPath = result.links[i].linkPath;\n-          var linkLabel = result.links[i].linkLabel;\n-          console.log;\n-          linksHTML +=\n-            `<a class=\"cu-button cu-button--white\" href=\"` +\n-            linkPath +\n-            `\">${linkLabel}</a>`;\n-        }\n-\n-        linksHTML += \"</ul>\";\n-      }\n-\n-      // Only show this field if it's defined\n-      if (result.startTerms) {\n-        startTermsHTML += '<ul class=\"start-terms\">';\n-        console.log(result.startTerms);\n-        for (var i = 0; i < result.startTerms.length; i++) {\n-          startTermsHTML += \"<li>\" + result.startTerms[i] + \"</li>\";\n-        }\n-\n-        startTermsHTML += \"</ul>\";\n-      }\n-\n-      // Only show this field if it's defined\n-      if (result.campus) {\n-        campusHTML += '<ul class=\"campuses\">';\n-\n-        for (var i = 0; i < result.campus.length; i++) {\n-          campusHTML += \"<li>\" + result.campus[i] + \"</li>\";\n-        }\n-\n-        campusHTML += \"</ul>\";\n-      }\n-\n-      // Only show this field if it's defined\n-      if (degreeTypes.title) {\n-        degreeTypesHTML = '<ul class=\"degree-types clearfix\">';\n-\n-        for (var j = 0; j < degreeTypes.title.length; j++) {\n-          degreeTypesHTML =\n-            degreeTypesHTML + \"<li>\" + degreeTypes.title[j] + \"</li>\";\n-        }\n-\n-        degreeTypesHTML = degreeTypesHTML + \"</ul>\";\n-      }\n-\n-      resultHTML =\n-        `<article class=\"wtf result visible columns small-12 clearfix\" data-program-title=\"${title}\">` +\n-        '<div class=\"image\" role=\"img\" data-src=\"' +\n-        imgSrc +\n-        '\" aria-label=\"' +\n-        imgAlt +\n-        '\">' +\n-        '<div class=\"active-content\">' +\n-        '<div class=\"active-content-inner\">' +\n-        '<p class=\"desc\">' +\n-        desc +\n-        \"</p>\" +\n-        '<a href=\"' +\n-        href +\n-        '\" title=\"View landing page for ' +\n-        title +\n-        ' program\">Learn More <svg class=\"icon icon-double-chevron\"><use xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"#icon-double-chevron\"></use></svg></a>' +\n-        \"</div>\" +\n-        \"</div>\" +\n-        '<a href=\"#\" class=\"active-content-toggle\"><svg class=\"icon icon-close\" title=\"Toggle result content\"><use xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"#icon-close\"></use></svg></a>' +\n-        \"</div>\" +\n-        '<div class=\"result-content\">' +\n-        '<h3 class=\"title\"><a href=\"' +\n-        href +\n-        '\" title=\"View landing page for ' +\n-        title +\n-        ' program\">' +\n-        title +\n-        \"</a></h3>\" +\n-        startTermsHTML +\n-        campusHTML +\n-        degreeTypesHTML +\n-        \"</div>\";\n-\n-      resultHTML =\n-        resultHTML +\n-        `<div class=\"relative-wrapper \">\n-      <div class=\"description\">\n-      \n-      <span class=\"triangle\">\n-      </span>\n-        <div class=\"title-wrapper\">\n-          <span class=\"title\">${title}</span> | <span class=\"program-type\">${result.degreeTypes.type}</span>\n-          <span class=\"close-icon\" aria-label=\"close\"></span>\n-      </div>\n-        <div class=\"program-description\">\n-        ${desc} \n-        </div>\n-        ${linksHTML}\n-        \n-      </div>\n-    </div>` +\n-        \"</article>\";\n-\n-      resultsSetItems.push(resultHTML);\n-      resultsSetCount++;\n-    },\n-\n-    clearResultsHTML: function () {\n-      $(\".dap-results .results-row\").empty();\n-    },\n-\n-    getUrlTypeQuery: function () {\n-      var _this = this,\n-        hash;\n-\n-      if (window.location.href.indexOf(\"?\") > -1) {\n-        var hashes = window.location.href\n-          .slice(window.location.href.indexOf(\"?\") + 1)\n-          .split(\"&\");\n-\n-        for (var i = 0; i < hashes.length; i++) {\n-          hash = hashes[i].split(\"=\");\n-\n-          if (hash[0] === \"type\") {\n-            // BREI's Version\n-            urlTypeQuery = hash[1].toLowerCase();\n-\n-            if (\n-              urlTypeQuery === \"undergraduate\" ||\n-              urlTypeQuery === \"graduate\"\n-            ) {\n-              _this.toggleSection($(\"#js-dap-section-\" + urlTypeQuery));\n-            } else if (urlTypeQuery === \"discover\") {\n-              _this.toggleSection($(\"#js-dap-section-\" + urlTypeQuery), false);\n-            }\n-\n-            return;\n-          } else if (hash[0] === \"startingtab\") {\n-            // Chapman's Version\n-            urlTypeQuery = hash[1].toString();\n-\n-            switch (urlTypeQuery) {\n-              case \"1\": // Majors\n-                _this.toggleSection($(\"#js-dap-section-undergraduate\"));\n-                $(\"#dap-undergraduate-program-major\").prop(\"checked\", true);\n-                break;\n-              case \"2\": // Minors\n-                _this.toggleSection($(\"#js-dap-section-undergraduate\"));\n-                $(\"#dap-undergraduate-program-minor\").prop(\"checked\", true);\n-                break;\n-              case \"3\": // 4+1\n-                _this.toggleSection($(\"#js-dap-section-undergraduate\"));\n-                $(\"#dap-undergraduate-program-bridge\").prop(\"checked\", true);\n-                break;\n-              case \"4\": // Graduate\n-                _this.toggleSection($(\"#js-dap-section-graduate\"));\n-                break;\n-            }\n-\n-            return;\n-          }\n-        }\n-      }\n-    },\n-\n-    initAutocompletes: function () {\n-      var keywordFields = $dapFeature.find('input[id*=\"keyword\"]'),\n-        undergraduateAutocompleteOptions = \"\",\n-        graduateAutocompleteOptions = \"\";\n-\n-      for (var i = 0; i < undergraduateProgramNames.length; i++) {\n-        undergraduateAutocompleteOptions +=\n-          '<option value=\"' + undergraduateProgramNames[i] + '\">';\n-      }\n-\n-      for (var j = 0; j < graduateProgramNames.length; j++) {\n-        graduateAutocompleteOptions +=\n-          '<option value=\"' + graduateProgramNames[j] + '\">';\n-      }\n-\n-      keywordFields.each(function () {\n-        var fieldID = $(this).attr(\"id\");\n-\n-        if (\n-          fieldID.indexOf(\"-discover\") !== -1 ||\n-          fieldID.indexOf(\"-undergraduate\") !== -1\n-        ) {\n-          $(this).autoComplete({\n-            minChars: 1,\n-            source: function (term, suggest) {\n-              suggest(undergraduateProgramNames);\n-            },\n-          });\n-        } else if (fieldID.indexOf(\"-graduate\") !== -1) {\n-          $(this).autoComplete({\n-            minChars: 1,\n-            source: function (term, suggest) {\n-              suggest(graduateProgramNames);\n-            },\n-          });\n-        }\n-      });\n-    },\n-\n-    titleAlphaSort: function (a, b) {\n-      if (a.title.trim() < b.title.trim()) {\n-        return -1;\n-      }\n-\n-      if (a.title.trim() > b.title.trim()) {\n-        return 1;\n-      }\n-\n-      return 0;\n-    },\n-\n-    applyHashFilters: function () {\n-      hashChangesActive = true;\n-\n-      var _this = this;\n-      var hashItems = window.location.hash.replace(\"#\", \"\").split(\"&\");\n-      var formType = _this.getHashValue(\"type\") || activeSection;\n-      var form = $(\"#js-dap-\" + formType + \"-form\");\n-      var noFilters = false;\n-\n-      _this.resetAllForms();\n-      _this.resetDiscoverMotivation();\n-      _this.resetDiscoverInterest();\n-\n-      for (var i = 0; i < hashItems.length; i++) {\n-        var filter = decodeURIComponent(hashItems[i].replace(/\\+/g, \"%20\")); // Remove any plus signs and code as spaces, then decode the filter\n-        var filterName = filter.substring(0, filter.indexOf(\"=\"));\n-        var filterValue = filter.substring(filter.indexOf(\"=\") + 1);\n-        var filterEl = $(\n-          '[name=\"' + filterName + '\"][value=\"' + filterValue + '\"]'\n-        ); // Get the element using the name and value. Standard filter element except for special cases below.\n-\n-        if (filterName === \"type\") {\n-          // Switch section on back/forward if necessary\n-          if (filterValue !== activeSection) {\n-            _this.toggleSection($(\"#js-dap-section-\" + filterValue));\n-          } else {\n-            continue;\n-          }\n-        } else if (filter.indexOf(\"keyword\") !== -1) {\n-          $('[name=\"' + filterName + '\"]').val(filterValue); // Set text input value\n-        } else if (filter.indexOf(\"school\") !== -1) {\n-          $('[name=\"' + filterName + '\"]')\n-            .val(filterValue)\n-            .change(); // Set select value and trigger change\n-        } else if (filter.indexOf(\"motivation\") !== -1) {\n-          var $motivationEl = $(\n-            '#js-dap-discover-motivations .motivation[data-motivation=\"' +\n-              filterValue +\n-              '\"]'\n-          );\n-\n-          _this.switchDiscoverMotivation($motivationEl);\n-        } else if (filter.indexOf(\"interest\") !== -1) {\n-          if (formType === \"discover\") {\n-            var $interestEl = $(\n-              '#js-dap-discover-interests .interest[data-interest=\"' +\n-                filterValue +\n-                '\"]'\n-            );\n-\n-            _this.switchDiscoverInterest($interestEl);\n-          } else {\n-            filterEl.prop(\"checked\", true); // Check the checkbox\n-          }\n-        } else {\n-          if (\n-            hashItems.length === 1 &&\n-            !filterName.length &&\n-            !filterValue.length\n-          ) {\n-            // No hash and no filters set!\n-\n-            if ($(\"#js-dap-section-\" + activeSection).hasClass(\"active\")) {\n-              noFilters = true;\n-              _this.toggleSection($(\"#js-dap-section-\" + activeSection)); // Close the section if it's open (which it should be)\n-            }\n-          } else {\n-            filterEl.prop(\"checked\", true); // Check the checkbox\n-          }\n-        }\n-      }\n-\n-      hashChangesActive = false;\n-\n-      if (!noFilters && formType && formType !== undefined && formType.length) {\n-        _this.resetFiltering(form);\n-      }\n-    },\n-\n-    getHashValue: function (key) {\n-      var matches = location.hash.match(new RegExp(key + \"=([^&]*)\"));\n-      return matches ? matches[1] : null;\n-    },\n-\n-    // Used to scroll to different points\n-    scrollToTarget: function (target) {\n-      headerOffset = parseInt($(\"html\").css(\"padding-top\").replace(\"px\", \"\"));\n-\n-      setTimeout(function () {\n-        isUserScroll = false;\n-\n-        $(\"html, body\").animate(\n-          {\n-            // scrollTop: $(target).offset().top - (headerOffset + 20),\n-          },\n-          standardTransitionTime,\n-          \"swing\",\n-          function () {\n-            setTimeout(function () {\n-              isUserScroll = true;\n-            }, 0);\n-          }\n-        );\n-      }, 250);\n-    },\n-\n-    scrollToResults: function () {\n-      var $resultsContainer = $(\"#js-dap-results-\" + activeSection);\n-      var resultsContainerHeight = $resultsContainer.outerHeight(true);\n-      var windowHeight = $(window).height();\n-      var bottomOfWindow = $(window).scrollTop() + windowHeight;\n-      var topOfResultsContainer = $resultsContainer.offset().top;\n-      var scrollPoint =\n-        topOfResultsContainer - (windowHeight - resultsContainerHeight);\n-\n-      // If the top of the results container isn't completely in view, scroll to it\n-      if (bottomOfWindow - resultsContainerHeight <= topOfResultsContainer) {\n-        $(\"html, body\").animate(\n-          {\n-            scrollTop: scrollPoint,\n-          },\n-          standardTransitionTime,\n-          \"swing\",\n-          function () {\n-            setTimeout(function () {\n-              isUserScroll = true;\n-            }, 0);\n-          }\n-        );\n-      }\n-    },\n-  };\n-})(window.jQuery, window.Modernizr, window, window.document);\n-\n-$(function () {\n-  \"use strict\";\n-  var elem = document.querySelector(\"nav\");\n-  elem.style.display = \"none\";\n-\n-  chapman.degreesAndProgramsApp.init();\n });\n"
                },
                {
                    "date": 1630022072593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,68 +1,75 @@\n /*global window:false */\n /*global $:false */\n /*jslint plusplus: true */\n-\n var chapman = chapman || {};\n-\n (function ($, Modernizr, window, document) {\n+  'use strict';\n+  chapman.degreesAndPrograms = {\n+    init: function () {\n+      $('.degrees-and-programs').addClass('ready');\n+      this.bindUIEvents();\n+    },\n \n-\t'use strict';\n+    setWavyBgHeight: function () { \n+      $('form').each(function () {\n+        var contentHeight = $(this).outerHeight()\n+        var wavyBGHeight = $(this).closest('.wavy-bg').height();\n+        $(this).find('.wavy-bg').css('min-height', contentHeight)\n+    \n+      })\n+    },\n+    bindUIEvents: function () {\n+      $('.results-views li').on('click', function () {\n+        chapman.degreesAndPrograms.switchResultsView($(this));\n+      });\n+      $('.dap-results').on('click', '.active-content-toggle', function (event) {\n+        event.preventDefault();\n+        $(this).closest('.result').toggleClass('active');\n+        $(this).closest('article').siblings().removeClass('active');\n+        $('.program-info__close').on('click', function (event) {\n+          $(this).closest('article.active').removeClass('active');\n+        });\n+        $('.program-info__close').on('click keypress', function (event) {\n+          event.preventDefault();\n+          if (a11yClick(event) === true) {\n+            $(this).closest('article.active').removeClass('active');\n+          }\n+        });\n \n-\tchapman.degreesAndPrograms = {\n-\n-\t\tinit: function () {\n-\n-\t\t\t$('.degrees-and-programs').addClass('ready');\n-\n-\t\t\tthis.bindUIEvents();\n-\n-\t\t},\n-\n-\t\tbindUIEvents: function () {\n-\n-\t\t\t$('.results-views li').on('click', function () {\n-\t\t\t\tchapman.degreesAndPrograms.switchResultsView($(this));\n-\t\t\t});\n-\n-\t\t\t$('.dap-results').on('click', '.active-content-toggle', function (event) {\n-\t\t\t\tevent.preventDefault();\n-\t\t\t\t$(this).closest('.result').toggleClass('active');\n-\t\t\t});\n-\n-\t\t\t$('#js-dap-undergraduate-interests .show-more a').on('click', function () {\n-\t\t\t\t$('#js-dap-undergraduate-interests-list').addClass('show-all');\n-\t\t\t});\n-\n-\t\t},\n-\n-\t\tswitchResultsView: function (el) {\n-\t\t\tvar viewButton = el,\n-\t\t\t\tnewView = viewButton.data('view'),\n-\t\t\t\tresults = viewButton.closest('.dap-results');\n-\n-\t\t\tif (!(viewButton.hasClass('active'))) {\n-\n-\t\t\t\tviewButton.closest('.results-views').find('li').removeClass('active');\n-\t\t\t\tviewButton.addClass('active');\n-\n-\t\t\t\tif (newView === 'grid-view') {\n-\t\t\t\t\tresults.removeClass('list-view').addClass('grid-view');\n-\t\t\t\t} else if (newView === 'list-view') {\n-\t\t\t\t\tresults.removeClass('grid-view').addClass('list-view');\n-\t\t\t\t}\n-\n-\t\t\t}\n-\n-\t\t}\n-\n-\t};\n-\n+        function a11yClick(event) {\n+          if (event.type === 'click') {\n+            return true;\n+          } else if (event.type === 'keypress') {\n+            var code = event.charCode || event.keyCode;\n+            if ((code === 32) || (code === 13)) {\n+              return true;\n+            }\n+          } else {\n+            return false;\n+          }\n+        }\n+      });\n+      $('#js-dap-undergraduate-interests .show-more a').on('click', function () {\n+        $('#js-dap-undergraduate-interests-list').addClass('show-all');\n+      });\n+    },\n+    switchResultsView: function (el) {\n+      var viewButton = el,\n+        newView = viewButton.data('view'),\n+        results = viewButton.closest('.dap-results');\n+      if (!(viewButton.hasClass('active'))) {\n+        viewButton.closest('.results-views').find('li').removeClass('active');\n+        viewButton.addClass('active');\n+        if (newView === 'grid-view') {\n+          results.removeClass('list-view').addClass('grid-view');\n+        } else if (newView === 'list-view') {\n+          results.removeClass('grid-view').addClass('list-view');\n+        }\n+      }\n+    }\n+  };\n })(window.jQuery, window.Modernizr, window, window.document);\n-\n $(function () {\n-\n-\t'use strict';\n-\n-\tchapman.degreesAndPrograms.init();\n-\n-});\n+  'use strict';\n+  chapman.degreesAndPrograms.init();\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1630022090631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n   chapman.degreesAndPrograms = {\n     init: function () {\n       $('.degrees-and-programs').addClass('ready');\n       this.bindUIEvents();\n+      this.setWavyBgHeight();\n     },\n \n     setWavyBgHeight: function () { \n       $('form').each(function () {\n"
                },
                {
                    "date": 1630022143042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n       this.setWavyBgHeight();\n     },\n \n     setWavyBgHeight: function () { \n-      $('form').each(function () {\n+      $('.dap-section .active form').each(function () {\n         var contentHeight = $(this).outerHeight()\n         var wavyBGHeight = $(this).closest('.wavy-bg').height();\n         $(this).find('.wavy-bg').css('min-height', contentHeight)\n     \n"
                },
                {
                    "date": 1630022203640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n       this.setWavyBgHeight();\n     },\n \n     setWavyBgHeight: function () { \n-      $('.dap-section .active form').each(function () {\n+      $('.dap-section .active').each(function () {\n         var contentHeight = $(this).outerHeight()\n         var wavyBGHeight = $(this).closest('.wavy-bg').height();\n         $(this).find('.wavy-bg').css('min-height', contentHeight)\n     \n"
                },
                {
                    "date": 1630022253256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n       this.setWavyBgHeight();\n     },\n \n     setWavyBgHeight: function () { \n-      $('.dap-section .active').each(function () {\n+      $('form').each(function () {\n         var contentHeight = $(this).outerHeight()\n         var wavyBGHeight = $(this).closest('.wavy-bg').height();\n         $(this).find('.wavy-bg').css('min-height', contentHeight)\n     \n"
                },
                {
                    "date": 1630022338005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,19 +7,9 @@\n   chapman.degreesAndPrograms = {\n     init: function () {\n       $('.degrees-and-programs').addClass('ready');\n       this.bindUIEvents();\n-      this.setWavyBgHeight();\n     },\n-\n-    setWavyBgHeight: function () { \n-      $('form').each(function () {\n-        var contentHeight = $(this).outerHeight()\n-        var wavyBGHeight = $(this).closest('.wavy-bg').height();\n-        $(this).find('.wavy-bg').css('min-height', contentHeight)\n-    \n-      })\n-    },\n     bindUIEvents: function () {\n       $('.results-views li').on('click', function () {\n         chapman.degreesAndPrograms.switchResultsView($(this));\n       });\n"
                }
            ],
            "date": 1628806850435,
            "name": "Commit-0",
            "content": "/*global window:false */\n/*global $:false */\n/*jslint plusplus: true */\n\nvar chapman = chapman || {};\n\n(function ($, Modernizr, window, document) {\n\n\t'use strict';\n\n\tchapman.degreesAndPrograms = {\n\n\t\tinit: function () {\n\n\t\t\t// $('.degrees-and-programs').addClass('ready');\n\n\t\t\tthis.bindUIEvents();\n\n\t\t},\n\n\t\tbindUIEvents: function () {\n\n\t\t\t$('.results-views li').on('click', function () {\n\t\t\t\tchapman.degreesAndPrograms.switchResultsView($(this));\n\t\t\t});\n\n\t\t\t$('.dap-results').on('click', '.active-content-toggle', function (event) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\t$(this).closest('.result').toggleClass('active');\n\t\t\t});\n\n\t\t\t$('#js-dap-undergraduate-interests .show-more a').on('click', function () {\n\t\t\t\t$('#js-dap-undergraduate-interests-list').addClass('show-all');\n\t\t\t});\n\n\t\t},\n\n\t\tswitchResultsView: function (el) {\n\t\t\tvar viewButton = el,\n\t\t\t\tnewView = viewButton.data('view'),\n\t\t\t\tresults = viewButton.closest('.dap-results');\n\n\t\t\tif (!(viewButton.hasClass('active'))) {\n\n\t\t\t\tviewButton.closest('.results-views').find('li').removeClass('active');\n\t\t\t\tviewButton.addClass('active');\n\n\t\t\t\tif (newView === 'grid-view') {\n\t\t\t\t\tresults.removeClass('list-view').addClass('grid-view');\n\t\t\t\t} else if (newView === 'list-view') {\n\t\t\t\t\tresults.removeClass('grid-view').addClass('list-view');\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n})(window.jQuery, window.Modernizr, window, window.document);\n\n$(function () {\n\n\t'use strict';\n\n\tchapman.degreesAndPrograms.init();\n\n});\n"
        }
    ]
}