@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin absCenter {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}


// MEDIA QUERY MANAGER
/*
0 - 600px:      Phone
600 - 900px:    Tablet portrait
900 - 1200px:   Tablet landscape
[1200 - 1800] is where our normal styles apply
1800px + :      Big desktop
$breakpoint arguement choices:
- phone
- tab-port
- tab-land
- big-desktop
ORDER: Base + typography > general layout + grid > page layout > components
1em = 16px
*/
@mixin respond($breakpoint) {
  @if $breakpoint==phone {
    @media only screen and (max-width: 37.5em) {
      @content
    }

    ; //600px
  }

  @if $breakpoint==small {
    @media only screen and (max-width: 47em) {
      @content
    }

    ; // 767px
  }

  @if $breakpoint==tab-port {
    @media only screen and (max-width: 56.25em) {
      @content
    }

    ; //900px
  }

  @if $breakpoint==tab-land {
    @media only screen and (max-width: 75em) {
      @content
    }

    ; //1200px
  }

  @if $breakpoint==big-desktop {
    @media only screen and (min-width: 112.5em) {
      @content
    }

    ; //1800
  }
}


// Breakpoint mixin
//
// There are some obvious problems with this. For example, we have a breakpoint defined
// at 780px for m(edium). But our designs target 768px and in neat/_settings_grid.scss,
// you'll find this setting: $medium-screen: 768px;
//
// In the future, let's clarify our device targets and try to adopt something more like this:
// https://stackoverflow.com/a/13550716/6763239
@mixin bp($point, $val: 0) {

  @if $point==s {

    // Mobile
    @media (min-width: 420px) {
      @content;
    }
  }

  @if $point==sx {

    // Mobile
    @media (max-width: 420px) {
      @content;
    }
  }

  // This should probably not be used (see note above). Leaving it as is because
  // not sure what changing it would break.
  // Use this instead: bp(wildcard-min, 767px)
  @if $point==m {

    // Medium
    @media (min-width: 780px) {
      @content;
    }
  }

  @if $point==mx {

    // Medium
    @media (max-width: 767px) {
      @content;
    }
  }

  @if $point==l {

    // Large
    @media (min-width: 1024px) {
      @content;
    }
  }

  @if $point==lx {

    // Large
    @media (max-width: 1024px) {
      @content;
    }
  }

  @if $point==xl {

    // Extra-Large
    @media (min-width: 1200px) {
      @content;
    }
  }

  @if $point==xlx {

    // Extra-Large
    @media (max-width: 1200px) {
      @content;
    }
  }

  @if $point==wildcard-min {

    // Uses variable breakpoint.
    @media (min-width: #{$val}) {
      @content;
    }
  }

  @if $point==wildcard-max {

    // Uses variable breakpoint.
    @media (max-width: #{$val}) {
      @content;
    }
  }

  // @if $point == highres {
  //   @media only screen and (-moz-min-device-pixel-ratio: 1.5), only screen and (-o-min-device-pixel-ratio: 3 / 2), only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min-devicepixel-ratio: 1.5), only screen and (min-resolution: 1.5dppx) { @content; }
  // }

  @if $point==print {
    @media only print {
      @content;
    }
  }

}

@mixin em_width($px, $default: $fontsize) {
  width: #{$px / $default}em;
}

@mixin em_height($px, $default: $fontsize) {
  height: #{$px / $default}em;
}

@mixin em_maxwidth($px, $default: $fontsize) {
  max-width: #{$px / $default}em;
}

@mixin em_minwidth($px, $default: $fontsize) {
  min-width: #{$px / $default}em;
}

@mixin em_maxheight($px, $default: $fontsize) {
  max-height: #{$px / $default}em;
}

@mixin em_minheight($px, $default: $fontsize) {
  min-height: #{$px / $default}em;
}

@mixin em_margin($top:0, $right:0, $bot:$top, $left:$right, $default: $fontsize) {
  margin: #{$top / $default}em #{$right / $default}em #{$bot / $default}em #{$left / $default}em
}

@mixin em_padding($top:0, $right:0, $bot:$top, $left:$right, $default: $fontsize) {
  padding: #{$top / $default}em #{$right / $default}em #{$bot / $default}em #{$left / $default}em
}

@mixin em_fontsize($px) {
  font-size: #{$px / $fontsize}em;
}

@mixin em_lineheight($px, $default: $fontsize) {
  line-height: #{$px / $default}em;
}

@mixin box_shadow($hoffset: 0, $voffset: 0, $blur: 0, $spread: 0, $color: $black, $inset: false) {

  @if $inset==false {
    -webkit-box-shadow: $hoffset $voffset $blur $spread $color;
    box-shadow: $hoffset $voffset $blur $spread $color;
  }

  @else {
    -webkit-box-shadow: inset $hoffset $voffset $blur $spread $color;
    box-shadow: inset $hoffset $voffset $blur $spread $color;
  }

}

@mixin vendorize($property, $value) {
  -webkit-#{$property}: $value;
  -moz-#{$property}: $value;
  -ms-#{$property}: $value;
  -o-#{$property}: $value;
  #{$property}: $value;
}

@mixin opacity($i) {
  $forie: $i * 100;

  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="+$forie+")";
  filter: alpha(opacity=$forie);
  opacity: $i;
}

@mixin transition($sel: all, $time: 1s, $ease: linear) {
  -webkit-transition: $sel $time $time;
  -moz-transition: $sel $time $time;
  -o-transition: $sel $time $time;
  -ms-transition: $sel $time $time;
  transition: $sel $time $time;
}

//Headings
@mixin main_heading($weight: 800) {
  font-family: $font-stack-heading;
  font-size: 26px;
  line-height: 30px;
  margin-top: 12px;
  margin-bottom: 24px;

  @if type-of($weight)==string {
    font-weight: unquote($weight);
  }

  @else {
    font-weight: $weight;
  }

  @include media($medium-screen) {
    font-size: 32px;
    line-height: 38px;
  }

  @include media($large-screen) {
    font-size: 36px;
    line-height: 40px;
  }
}

@mixin sub_heading($weight: 800) {
  font-family: $font-stack-heading;
  font-size: 32px;

  @if type-of($weight)==string {
    font-weight: unquote($weight);
  }

  @else {
    font-weight: $weight;
  }

  line-height: 40px;
}

@mixin section_heading($weight: 800) {
  font-family: $font-stack-heading;
  font-size: 22px;
  line-height: 26px;

  @if type-of($weight)==string {
    font-weight: unquote($weight);
  }

  @else {
    font-weight: $weight;
  }

  @include media($medium-screen) {
    font-size: 16px;
    line-height: 24px;
  }

  @include media($large-screen) {
    font-size: 22px;
    line-height: 32px;
  }
}

@mixin sub_section_heading($weight: 800) {
  font-family: $font-stack-heading;
  font-size: 18px;

  @if type-of($weight)==string {
    font-weight: unquote($weight);
  }

  @else {
    font-weight: $weight;
  }

  line-height: 24px;
}

@mixin content_heading($weight: 800) {
  font-family: $font-stack-heading;
  font-size: 14px;

  @if type-of($weight)==string {
    font-weight: unquote($weight);
  }

  @else {
    font-weight: $weight;
  }

  line-height: 18px;
}

@mixin content_label() {
  margin-bottom: 0px;
  font-family: $font-stack-heading;
  font-size: 16px;
  line-height: 10px;
  font-weight: 800;
  color: $color-medium-gray;
  text-transform: uppercase;

  @include media($large-screen) {
    font-size: 18px;
  }
}

//Paragraphs
@mixin paragraph() {
  font-size: 1.6rem;
  line-height: 2.4rem;
  margin: 0 0 0.625rem 0;
  font-weight: 400;
}

@mixin p_small() {
  margin-top: 24px;
  font-family: $font-stack-body;
  font-size: 12px;
  font-weight: 400;
  line-height: 18px;
}

@mixin hyperlinks() {
  margin-top: 14px;
  line-height: 14px;
}

@mixin fluid-width-video-container() {
  position: relative;
  padding-bottom: 56.25%;
  /* 16:9 */
  height: 0;

  & iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100% !important;
    height: 100% !important;
  }
}

@mixin aspect_ratio($width, $height) {
  position: relative;

  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }

  img {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

@mixin box-shadow {
  box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.3);
}

@mixin button($bg-color: $cu-red, $text-color: white) {
  display: inline-block;
  padding: 15px 25px;
  font-size: 16px;
  border-radius: 3px;
  background: $bg-color;
  color: $text-color;
  cursor: pointer;
  border: none;
  @include box-shadow;

  &:after {
    content: 'Â»';
    padding-left: 4px;
    font-size: 16px;
  }

  &:hover,
  &:focus {
    background-color: lighten($bg-color, 7%);
    @include transition(background-color);
  }

  &:active {
    transition: none;
    background-color: lighten($bg-color, 7%);
  }
}

@mixin transition($property) {
  transition: $property .4s;
}

@mixin ellipsis {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin form-control-focus($color) {
  $color-rgba: rgba(red($color), green($color), blue($color), 0.6);
  $border-color: rgba(red($color), green($color), blue($color), 0.8);

  &:focus,
  &:active {
    border-color: $border-color;
    outline: 0;
    box-shadow: 0 0 5px $color-rgba;
  }
}

@mixin theme-color-classes($primary) {
  .theme-bg-color {
    background-color: $primary;
  }

  .theme-border-color {
    border-color: $primary;
  }

  .theme-button {
    @include button($primary);
  }

  .theme-text-color {
    color: $primary
  }

  @include media($large-screen) {
    .theme-bg-color-alpha {
      background-color: rgba(red($primary), green($primary), blue($primary), 0.95);
    }
  }
}

@mixin condensed-heading {
  font-family: $font-stack-heading-emphasis;
  font-weight: 800;
  text-transform: uppercase;
}

@mixin slide-in-out($type, $from, $to, $duration: 1s ) {
  @if $type == in {
    &.slide-in {
      animation: #{$type} $duration forwards;
      @keyframes #{$type} {
        0% { transform: translateX($from); }
        100% { transform: translateX($to); }
      }
    }
  }

  @if $type == out {
    &.slide-out {
      animation: #{$type} $duration forwards;

      @keyframes #{$type} {
        0% { transform: translateX($from); }
        100% { transform: translateX($to); }
      }
    }
  }
}

@mixin drill-down-menu-style($width: 410px) {

  li {
    &:hover { cursor: pointer; }
  }

  ul li {
    display: flex;
    justify-content: space-between;
    border-bottom: 1px solid #CFCFCF;

    a, .drill-down-parent {
      font-family: "futura-pt", arial, sans-serif;
      line-height: 1.8rem;
      color: #231f20;
      padding: 20px 50px 20px 30px;
      width: 100%;
    }

    span.toggle-drilldown {
      display: flex;
      justify-content: center;
      align-items: center;
      position: relative;
      width: 4rem;
      background-color: #EAEAEA;

      .fas {
        display: flex;
        font-weight: 900;
        font-size: 1.4rem;
      }
    }

    ul.drilldown-menu {
      display: none;
      position: absolute;
      // height: 100%;
      width: 100%;
      left: $width;
      top: 0;
      transform: translateX(0);
      transition: all 1s;

      .menu-back {
        justify-content: start;
        align-items: center;
        background: #eee;
        font-weight: bold;
        padding: 20px 50px 20px 20px;

        .fas {
          margin-right: 2rem;
        }
      }
    }

    &.current {
      a,
      span {
        border-bottom: 1px solid #ccc;
        font-weight: 800;

        &::before {
          content: &#9679;
          color: $cu-red;
        }
      }
    }
  }
}