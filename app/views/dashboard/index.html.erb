<%# inherits from dashboard.html.erb %>
<nav class="navbar navbar-default navbar-fixed-top">
  <div class="container">
    <div class="navbar-header">
      <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar"
        aria-expanded="false" aria-controls="navbar">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="#">Cascade Assets</a>
    </div>
    <div id="navbar" class="navbar-collapse collapse">
    </div>
    <!--/.navbar-collapse -->
  </div>
</nav>
<div class="container">
  <h1>Sample Cascade Pages</h1>
</div>
<div class="container">
  <!-- Example row of columns -->
  <div class="row">
    <div class="col-md-4">
      <h3>Static</h3>
      <p>Static samples use static views to simulate content from the production WWW site. </p>
      <ul>
        <li><%= link_to 'Home Page', '/home_page/sample' %></li>
        <li><%= link_to 'Ad Landing Page', '/ad_landing_page/sample' %></li>
        <li><%= link_to 'One Column Hero Side Panel', '/one_column/hero_side_panel' %></li>
        <li><%= link_to 'One Column Landing Page', '/one_column/landing_page' %></li>
        <li><%= link_to 'One Column Brochure Page', '/one_column/brochure_page' %></li>
        <li><%= link_to 'One Column Law Theme', '/one_column/law_theme' %></li>
        <li><%= link_to 'Two Column Page', '/two_column/sample' %></li>
        <li><%= link_to 'Two Column Form', '/two_column/form' %></li>
        <li><%= link_to 'Two Column Law Theme', '/two_column/law_theme' %></li>
        <li><%= link_to 'Three Column Page', '/three_column/sample' %></li>
        <li><%= link_to 'Three Column College', '/three_column/sample-college' %></li>
        <li><%= link_to 'Three Column Form on Right', '/three_column/form_on_the_right' %></li>
        <li><%= link_to 'Three Column Law Theme', '/three_column/law_theme' %></li>
      </ul>
    </div>
    <div class="col-md-4">
      <h3>Modular</h3>
      <p>Modular samples use Content Type controllers and Data Definition objects to more closely emulate the data
        structures and organization in Cascade.</p>
      <ul>
        <li><%= link_to 'Ad Landing Page', '/modular/ad_landing' %></li>
        <li><%= link_to 'One Column Page', '/modular/one_column' %></li>
        <li><%= link_to 'Summer 2018: Mastheads, Widgets, Subbrands', '/modular/subbrand' %></li>
        <li><%= link_to 'One Column Business Graduate', '/modular/one_column_business_graduate' %></li>
        <li><%= link_to 'Two Column Page', '/modular/two_column' %></li>
        <li><%= link_to 'Two Column Law School', '/cascade/law' %></li>
        <li><%= link_to 'Three Column Page', '/modular/three_column' %></li>
        <li><%= link_to 'Three Column Business Page', '/modular/three_column_business'%> </li>
      </ul>
    </div>
    <div class="col-md-4">
      <h3>OmniNav</h3>
      <p>The OmniNav navbar is built and distributed from Cascade Assets.</p>
      <ul>
        <li><%= link_to 'Static Sample v1 - Home', '/omninav' %></li>
        <li><%= link_to 'Static Sample v2 - Home', '/omninav_v2/home' %></li>
        <li><%= link_to 'Static Sample v2 - 1 Column Law', '/omninav_v2/1col/law' %></li>
        <li><%= link_to 'Static Sample v2 - 2 Column', '/omninav_v2/2col' %></li>
        <li><%= link_to 'Static Sample v2 - 2 Column Communication', '/omninav_v2/2col/communication' %></li>
        <li><%= link_to 'Static Sample v2 - 3 Column', '/omninav_v2/3col' %></li>
        <li><%= link_to 'Static Sample v2 - 3 Column Communication', '/omninav_v2/3col/communication' %></li>
      </ul>
    </div>
  </div>
  <hr>
  <h2>Cascade Web Services</h2>
  <p>See <a href="https://www.hannonhill.com/cascadecms/latest/developing-in-cascade/rest-api/index.html">Hannon Hill
      REST API</a></p>
  <p>Be sure to set your Cascade username and password environment variables via </p>
  <pre>config/environment_variabes.yml</pre>
  <p> or in your
    <code>.bashrc</code> /
    <code>.zshrc</code>
    with:
  </p>
  <pre>export CASCADE_USERNAME=username</pre>
  <pre>export CASCADE_PASWORD=password</pre>
  <p>Note: if you have issues with Rails returning <code>nil</code>, try <a href="https://stackoverflow.com/a/51433154/4089199"><code>export RAILS_ENV=production && rails </code></a>. Sometimes, just <code>spring stop</code>
 alone will help.  </p>
  <div id="thor_tasks">
    <h3> Web Services - Rake Tasks</h3>
    <p>View all Rake tasks with <code>rake -T</code></p>
    <p>The following Rake tasks aim to be low friction with a one-to-one edit>save>push approach.
      You don't need to pass any arguments (such as asset_type or asset_path), as each is
      hardcoded in <code>web-services.rake</code>.
    <p>Each Rake task attempts to make a rolling backup (to <code>_backup/site/file_name/file.bak</code>) of each asset
      before
      modifying. This contains the full <code>JSON</code> response, which could be used to push back to Cascade (like a
      reversion).</p>
    <p>Consider checking out <a href="https://insomnia.rest/">https://insomnia.rest/</a> to get familiar with Hannon
      Hill's API</p>
    </p>
    <p><b>Note</b>: each of the following web services tasks is set to dev-www, not production (as of 7.16.2020)</p>
    EDITOR="mate --wait" bin/rails credentials:edit
    <details open="">
      <summary>
        Details
      </summary>
      <ul>
        <h3>Edit Cascade Assets Block</h3>
        <p>Usage: Make local edits, save, run command</p>
        <iframe width="560" height="315" src="https://www.youtube.com/embed/0zs9kvgthLo" frameborder="0"
          allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
        <p>This will create a new
          <code><%= 'cascade-assets-' + `git rev-parse --abbrev-ref HEAD`.strip %></code> block (based on
          your current
          branch name) for you to reference at <code>Chapman.edu/_cascade/blocks/html/</code>
        </p>
        <p>It can also be triggered via <code>bin/build</code>, which will automatically handle uploading and publishing
          <code>master.css</code> and <code>master.js</code></p>
        <p>You'll be prompted to pass an optional page path argument to fire a publish action every time this command is
          run.
          This can be reconfigured in <code>dist/_config/branch-settings.yml</code></p>
        Command:
        <pre>rake edit_cascade_assets</pre>
        Replaces the block
        <pre>Chapman.edu/_cascade/blocks/html/cascade-assets</pre>
        With local file
        <pre>dist/staging/cascade-assets.xml</pre>
        </p>
        <h3>Edit 1 Column Data Definition</h3>
        <p>Usage: Make local edits, save, run command</p>
        <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/dJxpehcmgUs" frameborder="0"
          allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
        <br>
        Command:
        <pre>rake edit_one_col_data_def</pre>
        Replaces the Data Definition
        <pre>Data Definitions:Modular/one_column</pre>
        With local file
        <pre>app/data_definitions/from_cascade/one_column.xml</pre>
        </p>
        <h3>Edit 2 Column Data Definition</h3>
        <p>Usage: Make local edits, save, run command</p>
        Command:
        <pre>rake edit_two_col_data_def</pre>
        Replaces the Data Definition
        <pre>Data Definitions:Modular/2 Column</pre>
        With local file
        <pre>app/data_definitions/from_cascade/two_column.xml</pre>
        </p>
        <h3>Edit 3 Column Data Definition</h3>
        <p>Usage: Make local edits, save, run command</p>
        Command:
        <pre>rake edit_three_col_data_def</pre>
        Replaces the Data Definition
        <pre>Data Definitions:Modular/3 Column</pre>
        With local file
        <pre>app/data_definitions/from_cascade/three_column.xml</pre>
        </p>
        <h3>Edit 2/3 Column Primary Content</h3>
        <p>Usage: Make local edits, save, run command</p>
        Command:
        <pre>rake edit_primary_content_2_3_col</pre>
        Replaces the Data Definition
        <pre>Chapman.edu/_cascade/formats/modular/PrimaryContent</pre>
        With local file
        <pre>.cascade-code/Chapman.edu/_cascade/formats/modular/PrimaryContent.vtl</pre>
        </p>
      </ul>
    </details>
    <div id="rake_tasks">
      <h3> Web Services - Thor Tasks</h3>
      <p>View all thor tasks with <code>thor list</code>
      <details>
        <summary>
          <b>Why Thor?</b> Thor allows passing <a href="http://whatisthor.com/"> arguments and flags</a>, useful
          for
          Cascade's API requirements:
        </summary>
        <blockquote>The “asset” property is quite complex. An easy way to understand its structure is by simply
          performing a “read” operation on an existing asset in the system. If you would like to “create” an asset
          (a
          page
          for instance), it would be useful to “read” a similar asset first to see the proper structure of “asset”
          property. The same object can even be reused for “create” operation with just tweaked parameters.
          Similarly,
          the
          easiest way to edit an asset is by reading it first and reusing the read “asset” object.</blockquote>
      </details>
      <br>
      <p><b>Note</b>: each of the following web services tasks is set to dev-www, not production (as of 7.16.2020)
      </p>
      <details open="">
        <summary>
          Details
        </summary>
        <ul>
          <h3>Publish Asset</h3>
          <p>Usage: Publishes any asset</p>
          Command:
          <pre>thor cascade:publish asset_type asset_path</pre>
          Example:
          <pre>thor cascade:publish page Chapman.edu/test-section/nick-test/test-publish</pre>
          </p>
          <h3>Download (scrape) HTML</h3>
          <p>Usage: Download <code>
          < body>
        </code> from any URL to a directory with the same path</p>
          Command:
          <pre>thor cascade:download url</pre>
          Example:
          <pre>thor cascade:download https://www.chapman.edu/about/index.aspx</pre>
          <p> Would download the <code>
        < body>
      </code> of the URL to </p>
          <pre>app/view/static/about/index.html.erb</pre>
          You'll still need to add the action and route, for now... </span>
          </p>
        </ul>
      </details>
      <hr />
      <h3> All Rake Tasks: </h3>
      <% rake_tasks = `rake -T`.split("\n") %>
      <details open="">
        <summary>
          Details
        </summary>
        <ul>
          <% rake_tasks.each do |t| %>
          <pre><%= t %></pre>
          <% end %>
        </ul>
      </details>
    </div>
    <footer>
      <p>&copy; Chapman University</p>
    </footer>
  </div> <!-- /container -->