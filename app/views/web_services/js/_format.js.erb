<script>
  $( document ).ready(function() {
  var results = $('#results');
  
  // Navigation
  results.append('<strong>Jump to: </strong>');
  results.append('<a href="#read1">Read Results</a> | <a href="#read2">Read Fields</a> | <a href="#edit">Edit</a> | <a href="#create">Create</a>');
  
  /* STEP 0. BASE URL - Update for your URL */
  var url = "https://dev-cascade.chapman.edu/api/v1/";
  
  /* STEP 1. SET UP */
  // Fill in your usename, password and sitename
  // ANSWER HERE
  var creds = '?u=<%=<%= ENV["cascade_username"] %>%>&p=<%= <%= ENV["cascade_password"] %> %>';
  var siteName = 'Chapman.edu';
  
  /* STEP 2. IDENTIFY AN ASSET */
  // Identify which asset you are accessing with the path (path and siteName) or the id, and the type
  // ANSWER HERE
  var path = '/format/' + siteName + '/_cascade/formats/modular/widgets/nick-1-col/circle_image_with_text';
  
  /* STEP 3. FULL URL */
  // Put all the previous variables together with the operation to create the full URL 
  // e.g. https://workshops.cascadecms.com/api/v1/read/widget/Advanced%20Velocity/index?u=username&p=password
  // ANSWER HERE
  var readURL = url + 'read' + path + creds;
  //results.append(readURL);
  
  /* STEP 4. READ ASSET */
  // Perform a GET request with the full URL
  results.append('<h1 id="read1">Read Results</h1>');
  $.get(readURL, function(data) {
    /* STEP 5. CHECK RESPONSE */
    // ANSWER HERE
    if (data.success) {
      // Output a success message
      // ANSWER HERE
      results.append('Success reading!');
  
      // Output the data, use JSON.stringfy and <pre> to nicely format the output
      // ANSWER HERE
      console.log(data.asset);
      results.append("<pre>" + JSON.stringify(data.asset, null, ' '));
  
      /* Open cascade-api-2018.html now and you should get a success or error message.
       Make sure you get a success before continuing to step 6 */
      /** STOP HERE - await further instructions **/
  
  
      /* STEP 6. FIND FIELDS */
      // Print out individual fields from the asset, such as title, banner image, etc. 
      // Use the structure you printed out in the previous step to navigate to the value you are looking for
      results.append('<h2 id="read2">Read Fields</h2>');
      // ANSWER HERE
      var widget = data.asset.scriptFormat;
  
      results.append("<strong>Widget Name:</strong> ");
      // ANSWER HERE
      results.append(widget.name);
  
      results.append("<br/><strong>Widget Path:</strong> ");
      // ANSWER HERE
      results.append(widget.path);
  
      results.append("<br/><strong>Text of First Component:</strong> ");
      // ANSWER HERE
      results.append(widget.script);
      
      // TODO: backup the current format (and possibly automatically commit/version control it)

      // https://dev-cascade.chapman.edu/entity/open.act?id=4947aae0c0a81e4b340dfbdd9b992efb&type=format

      var widgetId = widget.id
      var pathPrefix = 'https://dev-cascade.chapman.edu/entity/' + widgetId + '&btype=format'
      console.log('path prefix: ' + pathPrefix)
      /** STOP HERE - await further instructions
        If you are done early, go back and find more complex fields, such as the multiple highlight group, or read other assets such as a profile block
      STOP HERE **/
  
      results.append('<br/><br/><hr/>');
  
      /* STEP 7. MAKE AN EDIT */
      // Edit individual fields by first pointing to them as when you were reading the fields, and then setting them equal to the new value
      // This is only possible because we have already 'read' the widget
      // ANSWER HERE
      // widget.metadata.title = "Hello it's july 30th 2019";

      // var logToGoogleSheet = `[system-view:internal]      
      // <![CDATA[#protect
      // <script>
      // !function(e,i){if("function"==typeof define&&define.amd)define(["exports","jquery"],function(e,r){return i(e,r)});else if("undefined"!=typeof exports){var r=require("jquery");i(exports,r)}else i(e,e.jQuery||e.Zepto||e.ender||e.$)}(this,function(e,i){function r(e,r){function n(e,i,r){return e[i]=r,e}function a(e,i){for(var r,a=e.match(t.key);void 0!==(r=a.pop());)if(t.push.test(r)){var u=s(e.replace(/\[\]$/,""));i=n([],u,i)}else t.fixed.test(r)?i=n([],r,i):t.named.test(r)&&(i=n({},r,i));return i}function s(e){return void 0===h[e]&&(h[e]=0),h[e]++}function u(e){switch(i("[name=""+e.name+""]",r).attr("type")){case"checkbox":return"on"===e.value?!0:e.value;default:return e.value}}function f(i){if(!t.validate.test(i.name))return this;var r=a(i.name,u(i));return l=e.extend(!0,l,r),this}function d(i){if(!e.isArray(i))throw new Error("formSerializer.addPairs expects an Array");for(var r=0,t=i.length;t>r;r++)this.addPair(i[r]);return this}function o(){return l}function c(){return JSON.stringify(o())}var l={},h={};this.addPair=f,this.addPairs=d,this.serialize=o,this.serializeJSON=c}var t={validate:/^[a-z_][a-z0-9_]*(?:\[(?:\d*|[a-z0-9_]+)\])*$/i,key:/[a-z0-9_]+|(?=\[\])/gi,push:/^$/,fixed:/^\d+$/,named:/^[a-z0-9_]+$/i};return r.patterns=t,r.serializeObject=function(){return new r(i,this).addPairs(this.serializeArray()).serialize()},r.serializeJSON=function(){return new r(i,this).addPairs(this.serializeArray()).serializeJSON()},"undefined"!=typeof i.fn&&(i.fn.serializeObject=r.serializeObject,i.fn.serializeJSON=r.serializeJSON),e.FormSerializer=r,r});
      // </script>
      //  #protect]]>
      // #set ( $thePage = $_XPathTool.selectSingleNode($contentRoot,"//system-page") )
      // #set ( $thePath = $thePage.getChild("path").value) )
      
      // link: $thePage.getChild("link").value
      // last published: $page.lastPublishedOn
      
      // props: $_PropertyTool.outputProperties($element)
      // element: $element
      // <form id="test-form">
        
      //   <div>
      //     <label>Field 1</label>
      //     <input type="text" name="widget" value="${_EscapeTool.xml($thePage.getChild("link").value)}"/>
      //   </div>
      
      //   <div>
      //     <label>Field 2</label>
      //     <input type="text" name="path" value="${_EscapeTool.xml($thePage.getChild("path").value)}"/>
      //   </div>
        
      //   <div>
      //     <label>Field 3</label>
      //     <input type="text" name="last published" value="Field 3"/>
      //   </div>
        
      //   <div>
      //     <button type="submit" id="submit-form">Submit</button>
      //   </div>
      
      // </form>
      
      // <script>
      //   var $form = $("form#test-form"),
      //     url = "https://script.google.com/macros/s/AKfycbwiN_dbQQq9mEZqZlqBhdifgM6ZhD493FnYkNWQwJ0-oU5WHwzJ/exec"
      
      // $("#submit-form").on("click", function(e) {
      //   e.preventDefault();
      //   var jqxhr = $.ajax({
      //     url: url,
      //     method: "GET",
      //     dataType: "json",
      //     data: $form.serializeObject()
      //   }).success(
      //     // do something
      //   );
      // })
      // </script>
      
      // [/system-view:internal]`
      
      // IF THE FORMAT DOESN'T CONTAIN ITS FILE PATH, ADD IT TO THE BOTTOM 
      if (widget.script.indexOf(widget.path) === -1) {
        widget.script = widget.script + `#set ($gsWidgetPath = ` + widget.path + ')';
        console.log(gsWidget);
        // widget.script = widget.script + ' ' + '##' + widget.path;
        
    }
  
      /* STEP 8. PERFORM EDIT */
      // Perform a POST request in order to send your change back to Cascade
      // Set up the EDIT URL
      // ANSWER HERE
      var editURL = url + 'edit' + creds;
      console.log('edit url:' + editURL);

      results.append('<h1 id="edit">Edit Results</h1>');
      // Call the POST method
      // ANSWER HERE
      var edit = $.post(editURL, JSON.stringify({'asset':data.asset}), function(data) {
          // Remember to check the reply to see if it was a success
          // ANSWER HERE
          if (data.success) {
            results.append('Success editing!');
          } else {
            results.append('Error editing: ' + data.message);
          }
      });
  
      /** STOP HERE - await further instructions
        If you are done early, go back and perform more edits, or try making an edit on a different asset
      STOP HERE **/
  
  
      // Just to make sure previous code is done
      edit.done(function() {
        results.append('<br/><br/><hr/>');
  
        /* STEP 9. NEW ASSET */
        // Create an asset by "describing" it
        // ANSWER HERE
        var newwidget = {
          'name' : 'new-widget-rest',
          'parentFolderPath' : 'nick',
          'siteName' : siteName,
          'contentTypePath' : 'Chapman.edu:Modular/1 Column',
          'metadata' : {
            'title' : 'Hello, a new widget\'s title from REST API!',
            'metaDescription' : 'A description of the widget'
          },
          'structuredData' : {}
        };
  
        /* STEP 10. CREATE */
        // Perform a POST request in order to send your new asset to Cascade
        // Remember to check the reply to see if it was a success
  
        // Set up the CREATE URL
        // ANSWER HERE
        var createURL = url + 'create' + creds;
  
        results.append('<h1 id="create">Create Results</h1>');
  
        // Call the POST method
        // ANSWER HERE
        $.post(createURL, JSON.stringify({'asset': { 'widget' : newwidget } }), function(data) {
            // Remember to check the reply to see if it was a success
            // ANSWER HERE
            if (data.success) {
              results.append('Created asset\'s ID: ' + data.createdAssetId);
            } else {
              results.append('Error creating: ' + data.message);
            }
        });
      });
    } else {
      // Output the message on a failure
      // ANSWER HERE
      results.append('Error reading: ' + data.message);
    }
  }, 'json');
  
  });
</script>