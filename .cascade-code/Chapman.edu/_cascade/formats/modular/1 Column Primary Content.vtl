    <div class="page-meta hidden">
    nick testing in /_cascade/formats/modular/PrimaryContent...
    <ul>
        <li>last published: $currentPage.lastPublishedOn</li>
        <li>$currentPage.parentFolder.path</li>
        current page path $currentPage.path
        current page StructuredData $currentPage.StructuredData
        #set ($structuredData = $currentPage.StructuredData ) 
    
        ## $_PropertyTool.outputProperties($currentPage)
        
        #set ($customNavBlock = $currentPage.parentFolder.metadata.getDynamicField('NN Test - Custom Navigation').value.replaceAll("Chapman.edu", "")))
        <li>Custom Navigation Path: $customNavBlock</li>
        
        #set ($currentPagePath = $currentPage.path)
        #set ($currentBlock = $_.locateBlock("${customNavBlock}", "Chapman.edu"))
        $currentBlock.path
        #set ($currentBlockPath = $currentBlock.path)
        #log($currentBlockPath)
        
        $currentBlock.StructuredData
        #set ($currentBlockID = $currentBlock.identifier.id)
          
          currentBlock ID: $currentBlockID
        ##   #if ($currentPage.parentFolder.metadata.getDynamicField('NN Test - Custom Navigation').value != '')
          
          foldername $currentPage.parentFolder.name
          #if ($currentPage.parentFolder.name == 'contextual-uninav')
          <li>Custom Nav enabled</li>
            
            
            #set ($currentPageID = $currentPage.identifier.id)
            ## $currentPage
            currentPageID $currentPageID 
            
            <![CDATA[#protect 
            <script>

           $(function () {
           
           console.log('parent folder contains custom nav path ' )
           console.log('currentPageID ' + "${currentPageID}")
            
            var readURL = "https://dev-cascade.chapman.edu/api/v1/read/page/$currentPageID?25c1b597-04f0-4888-90ed-68719408964c";

            var editURL = "https://dev-cascade.chapman.edu/api/v1/edit/page/$currentPageID?apiKey=25c1b597-04f0-4888-90ed-68719408964c";

## var readURL =
##   "https://dev-cascade.chapman.edu/api/v1/read/page/" +
##   "3bfee3a3c0a81e8a21e8377ccbec738e" +
##   "?" +
##   "apiKey=1f53f374-acbf-4508-b7df-9df36d00e520";

## var editURL =
##   "https://dev-cascade.chapman.edu/api/v1/edit/page/" +
##   "3bfee3a3c0a81e8a21e8377ccbec738e" +
##   "?" +
##   "apiKey=1f53f374-acbf-4508-b7df-9df36d00e520";


console.log("API read url: " + readURL);

// Not declared `async` because it returns a promise already
function wait(ms) {
  // Returns a promise that we can `await`
  return new Promise((resolve, reject) => {
    setTimeout(function () {
      console.log(`Waiting for ${ms}ms`);
      // Resolve the promise with the timeout value,
      // not really important here with what it is resolved
      resolve(ms);
    }, ms);
  });
}

async function getData() {
  try {
    // GET some data from whereever
    let response = await fetch(readURL);

    let data = await response.json();

    return data;
  } catch (err) {
    console.log(err);
    return null;
  }
}

// IIFE to use `await` at the top level
(async function manipulateData() {
  // this is an infinite loop, for developing you might want
  // a way to stop it, can crash your browser if you mess
  // it up inside =)...
  // while (true) {
  console.log("getting data...");
  let data = await getData();
  console.log(data);

  var pageConfigArray = data.asset.page.pageConfigurations;
  pageConfigArray.forEach(function (config, index) {
    if (config.name == "html") {
      var configPageRegions = config.pageRegions;
      console.log(configPageRegions);

      configPageRegions.forEach(function (config, index) {
        if (config.name == "UNINAV") {
          // CURRENT PAGE CONFIG VALUES - WE WILL UPDATE THESE BELOW!
          let blockID = config.blockId;
          let blockPath = config.blockPath;
          console.log("current block id: " + blockID);
          console.log("current block path: " + blockPath);

          // UPDATE PAGE CONFIG WITH OUR NEW VALUES FROM THE PARENT FOLDER METADATA
          // TESTING DATA ONLY - ( REPLACE THESE VALUES WITH VELOCITY VALUES )
          const customBlockPath =
            "_cascade/blocks/html/custom-navigation/Custom Navigation - Nick Test";
          const customBlockID = "e4133361c0a81e8a768838d347c57eea";

          config.blockId = customBlockID;
          config.blockPath = customBlockPath;

          // return blockID;
          // return blockPath;

          console.log("updated custom block ID: " + customBlockID);
          console.log("updated custom block PATH: " + customBlockPath);
        }
      });
    } // pageConfigArray.forEach() callback end
  });
  console.log(data.asset.page.pageConfigurations);

  fetch(editURL, {
    method: "POST", // or 'PUT'
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(data),
  })
    .then((response) => response.json())
    .then((data) => {
      console.log("Success:", data);
    })
    .catch((error) => {
      console.error("Error:", error);
    });
})();

            
            
            ## end document.ready
            });

                
            </script>
        #protect]]>    

                
                
                ## logo: $currentBlock.getStructuredDataNode("uninav/logo").identifier
                
                ## #set ($menuItems =  $currentBlock.getStructuredDataNodes('uninav/globalNav/menuItem/label'))
                
                
                



                ## menuItems:
                
                
                
                
        ##         #foreach ($menuItem in $menuItems)
        ##         ## menuItem props $_PropertyTool.outputProperties($menuItem)
                
                    
        ##             $menuItem.textValue
                    
        ##             $menuItem.identifier
                    
        ##             ## $menuItem.getStructuredDataNodes("//menuItem[label='${menuItem.value}']/menuLink")
                    
        ##             $menuItem.textValueAsXMLElement

                    
        ##         #end
                
        ##         ##  #set ($submenuItems = $_XPathTool.selectNodes($menuItems,
        ##         ## "//menuItem[label='${menuItem.value}']/submenuItem[label!='']") )
        ##         #set ($submenuItems =  $currentBlock.getStructuredDataNodes('uninav/globalNav/menuItem/submenuItem'))
        ##         #set ($link = $currentBlock.getStructuredDataNodes('uninav/globalNav/menuItem/submenuItem').textvalue )

        ##         submenuItems:
                
                
        ##         ## $_PropertyTool.outputProperties($submenuItems)
                
                
        ##         #foreach ($submenuItem in $submenuItems)
                
        ##         ## $_PropertyTool.outputProperties($submenuItem)
        ##             ${_EscapeTool.xml($submenuItem.getChild('label').textValue)}
        ##             ${_EscapeTool.xml($submenuItem.getChild('linkType').textValue)}
        ##             ${_EscapeTool.xml($submenuItem.assetIdentifier)}
        ##             ## Identifier.Path.PathAsString
                    
                    
                    
                    

        ##         #end

        ##         svg: $currentBlock.getStructuredDataNode('uninav/logo/icon_svg').textValue
             
                
              


        
        
        
        #end
        

      
    </ul>
</div>
#import( "/_cascade/formats/helpers.velocity" )
#import( "/_cascade/formats/modular/widgets/Text Editor Widget" )
#import( "/_cascade/formats/modular/widgets/1 Column/fact_cards_with_text" )
#import( "/_cascade/formats/modular/widgets/1 Column/video_with_text" )
#import( "/_cascade/formats/modular/widgets/1 Column/image_with_text" )
#import( "/_cascade/formats/modular/widgets/1 Column/circle_image_with_text" )
#import( "/_cascade/formats/modular/widgets/1 Column/text_only" )
#import( "/_cascade/formats/modular/widgets/Text with CTA" )
#import( "/_cascade/formats/modular/widgets/Grid Block Widget" )
#import( "/_cascade/formats/modular/widgets/1 Column/call_to_action_3_up" )
#import( "/_cascade/formats/modular/widgets/1 Column/chapman_social_feed" )
#import( "/_cascade/formats/modular/widgets/1 Column/subscribe" )
#import( "/_cascade/formats/modular/widgets/1 Column/call_to_action_block" )
#import( "/_cascade/formats/modular/widgets/1 Column/chapman_events_feed" )
#import( "/_cascade/formats/modular/widgets/1 Column/chapman_stories_feed" )
#import( "/_cascade/formats/modular/widgets/1 Column/call_to_action_footer" )
#import( "/_cascade/formats/modular/widgets/1 Column/contact_footer" )
#import( "/_cascade/formats/modular/widgets/1 Column/multi_image_content_blocks" )
#import( "/_cascade/formats/modular/widgets/1 Column/by_the_numbers" )
#import( "/_cascade/formats/modular/widgets/1 Column/image_slider_widget" )
#import( "/_cascade/formats/modular/widgets/1 Column/campus_map_widget" )
#import( "/_cascade/formats/modular/widgets/1 Column/google_map_widget" )
## #import( "/_cascade/formats/modular/widgets/1 Column/google_map_widget_address" )

#set ($currentPage = $_XPathTool.selectSingleNode($contentRoot, "//system-page[@current]") )
#set ($primaryContent = $currentPage.getChild('system-data-structure').getChild('primaryContent'))
#set ($widgets = $_XPathTool.selectNodes($primaryContent, "widget"))
#set ($meta = $currentPage.getChild('system-data-structure').getChild('meta') )

## Widgets
#foreach ($widget in $widgets)
    #set ($widgetType = $widget.getChild('widgetType').value)
    
    #if ($widgetType == 'New Text Editor')
      #set ($displayWidget = $widget.getChild('textEditorWidget').getChild('display').value)
      #if ($displayWidget == 'Yes')
          #outputTextEditorWidget($widget)
      #end
    #end

    #if ($widgetType == 'Fact Cards with Text')
        #outputFactCardsWithText($widget)
    #end
    
    #if ($widgetType == 'Image with Text')
        #outputImageWithText($widget)
    #end
    
    #if ($widgetType == 'Video with Text')
        #outputVideoWithText($widget)
    #end
    

    #if ($widgetType == 'Text with CTA')
      #set ($displayWidget = $widget.getChild('textWithCTA').getChild('display').value)
      #if ($displayWidget == 'Yes')
          #outputTextWithCTA($widget)
      #end
    #end
    
    #if ($widgetType == 'Text Only')
        #outputTextOnly($widget)
    #end

    #if ($widgetType == 'Call To Action 3 Up')
        #outputCallToAction3Up($widget)
    #end
    
    #if ($widgetType == 'Social.chapman Feed')
        #outputChapmanSocialFeed($widget)
    #end
    
    #if ($widgetType == 'Subscribe')
        #outputSubscribe($widget)
    #end
    
    #if ($widgetType == 'Call To Action Block')
        #outputCallToActionBlock($widget)
    #end
    
    #if ($widgetType == 'Events.chapman Feed')
        #outputChapmanEventsFeed($widget)
    #end
    
    #if ($widgetType == 'Stories Feed')
        #outputChapmanStoriesFeed($widget)
    #end
    
    #if ($widgetType == 'Call To Action Footer')
        #outputCallToActionFooter($widget)
    #end
    
    #if ($widgetType == 'Contact Footer')
        #outputContactFooter($widget)
    #end
    
    #if ($widgetType == 'Multi Image Content Blocks')
        #outputMultiImageContentBlocks($widget)
    #end
    
    #if ($widgetType == 'By the Numbers')
        #outputByTheNumbers($widget)
    #end
    
    #if ($widgetType == 'Image Slider Widget')
        #outputimageSliderWidget($widget)
    #end
    
    #if ($widgetType == 'Circle Image With Text')
        #outputCircleImageWithText($widget)
    #end
    
    #if ($widgetType == 'Campus Map Widget')
        #outputCampusMapWidget($widget)
    #end
    
    #if ($widgetType == 'Google Map Widget')
        #outputGoogleMapWidget($widget)
    #end

    ##    
    #if ($widgetType == 'Grid Block')
        #set ($displayGridBlock = $widget.getChild('gridBlockWidget').getChild('display').value)
        #if ($displayGridBlock == 'Yes')
            #outputGridBlockWidget($widget)
        #end
    #end
    ##     
    ## #if ($widgetType == 'Google Map Widget - Address')
    ##     #outputGoogleMapWidgetAddress($widget)
    ## #end
#end
###inspectXML($widget)